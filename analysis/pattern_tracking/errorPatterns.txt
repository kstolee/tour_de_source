

class _EOF(object):
    pass



class str(basestring):
    """str(object) -> string

Return a nice string representation of the object.
If the argument is a string, the return value is the same object."""
    
    def __add__():
        """x.__add__(y) <==> x+y"""
        
    
    def __contains__():
        """x.__contains__(y) <==> y in x"""
        
    
    def __delattr__():
        """x.__delattr__('name') <==> del x.name"""
        
    
    def __eq__():
        """x.__eq__(y) <==> x==y"""
        
    
    def __format__():
        """S.__format__(format_spec) -> string
    
    Return a formatted version of S as described by format_spec."""
        
    
    def __ge__():
        """x.__ge__(y) <==> x>=y"""
        
    
    def __getattribute__():
        """x.__getattribute__('name') <==> x.name"""
        
    
    def __getitem__():
        """x.__getitem__(y) <==> x[y]"""
        
    
    def __getnewargs__():
        
    
    def __getslice__():
        """x.__getslice__(i, j) <==> x[i:j]
               
               Use of negative indices is not supported."""
        
    
    def __gt__():
        """x.__gt__(y) <==> x>y"""
        
    
    def __hash__():
        """x.__hash__() <==> hash(x)"""
        
    
    def __init__():
        """x.__init__(...) initializes x; see help(type(x)) for signature"""
        
    
    def __le__():
        """x.__le__(y) <==> x<=y"""
        
    
    def __len__():
        """x.__len__() <==> len(x)"""
        
    
    def __lt__():
        """x.__lt__(y) <==> x<y"""
        
    
    def __mod__():
        """x.__mod__(y) <==> x%y"""
        
    
    def __mul__():
        """x.__mul__(n) <==> x*n"""
        
    
    def __ne__():
        """x.__ne__(y) <==> x!=y"""
        
    
    def __new__():
        """T.__new__(S, ...) -> a new object with type S, a subtype of T"""
        
    
    def __reduce__():
        """helper for pickle"""
        
    
    def __reduce_ex__():
        """helper for pickle"""
        
    
    def __repr__():
        """x.__repr__() <==> repr(x)"""
        
    
    def __rmod__():
        """x.__rmod__(y) <==> y%x"""
        
    
    def __rmul__():
        """x.__rmul__(n) <==> n*x"""
        
    
    def __setattr__():
        """x.__setattr__('name', value) <==> x.name = value"""
        
    
    def __sizeof__():
        """S.__sizeof__() -> size of S in memory, in bytes"""
        
    
    def __str__():
        """x.__str__() <==> str(x)"""
        
    
    def __subclasshook__():
        """Abstract classes can override this to customize issubclass().
    
    This is invoked early on by abc.ABCMeta.__subclasscheck__().
    It should return True, False or NotImplemented.  If it returns
    NotImplemented, the normal algorithm is used.  Otherwise, it
    overrides the normal algorithm (and the outcome is cached).
    """
        
    
    def _formatter_field_name_split():
        
    
    def _formatter_parser():
        
    
    def capitalize():
        """S.capitalize() -> string
    
    Return a copy of the string S with only its first character
    capitalized."""
        
    
    def center():
        """S.center(width[, fillchar]) -> string
    
    Return S centered in a string of length width. Padding is
    done using the specified fill character (default is a space)"""
        
    
    def count():
        """S.count(sub[, start[, end]]) -> int
    
    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are interpreted
    as in slice notation."""
        
    
    def decode():
        """S.decode([encoding[,errors]]) -> object
    
    Decodes S using the codec registered for encoding. encoding defaults
    to the default encoding. errors may be given to set a different error
    handling scheme. Default is 'strict' meaning that encoding errors raise
    a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
    as well as any other name registered with codecs.register_error that is
    able to handle UnicodeDecodeErrors."""
        
    
    def encode():
        """S.encode([encoding[,errors]]) -> object
    
    Encodes S using the codec registered for encoding. encoding defaults
    to the default encoding. errors may be given to set a different error
    handling scheme. Default is 'strict' meaning that encoding errors raise
    a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
    'xmlcharrefreplace' as well as any other name registered with
    codecs.register_error that is able to handle UnicodeEncodeErrors."""
        
    
    def endswith():
        """S.endswith(suffix[, start[, end]]) -> bool
    
    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try."""
        
    
    def expandtabs():
        """S.expandtabs([tabsize]) -> string
    
    Return a copy of S where all tab characters are expanded using spaces.
    If tabsize is not given, a tab size of 8 characters is assumed."""
        
    
    def find():
        """S.find(sub [,start [,end]]) -> int
    
    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.
    
    Return -1 on failure."""
        
    
    def format():
        """S.format(*args, **kwargs) -> string
    
    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}')."""
        
    
    def index():
        """S.index(sub [,start [,end]]) -> int
    
    Like S.find() but raise ValueError when the substring is not found."""
        
    
    def isalnum():
        """S.isalnum() -> bool
    
    Return True if all characters in S are alphanumeric
    and there is at least one character in S, False otherwise."""
        
    
    def isalpha():
        """S.isalpha() -> bool
    
    Return True if all characters in S are alphabetic
    and there is at least one character in S, False otherwise."""
        
    
    def isdigit():
        """S.isdigit() -> bool
    
    Return True if all characters in S are digits
    and there is at least one character in S, False otherwise."""
        
    
    def islower():
        """S.islower() -> bool
    
    Return True if all cased characters in S are lowercase and there is
    at least one cased character in S, False otherwise."""
        
    
    def isspace():
        """S.isspace() -> bool
    
    Return True if all characters in S are whitespace
    and there is at least one character in S, False otherwise."""
        
    
    def istitle():
        """S.istitle() -> bool
    
    Return True if S is a titlecased string and there is at least one
    character in S, i.e. uppercase characters may only follow uncased
    characters and lowercase characters only cased ones. Return False
    otherwise."""
        
    
    def isupper():
        """S.isupper() -> bool
    
    Return True if all cased characters in S are uppercase and there is
    at least one cased character in S, False otherwise."""
        
    
    def join():
        """S.join(iterable) -> string
    
    Return a string which is the concatenation of the strings in the
    iterable.  The separator between elements is S."""
        
    
    def ljust():
        """S.ljust(width[, fillchar]) -> string
    
    Return S left-justified in a string of length width. Padding is
    done using the specified fill character (default is a space)."""
        
    
    def lower():
        """S.lower() -> string
    
    Return a copy of the string S converted to lowercase."""
        
    
    def lstrip():
        """S.lstrip([chars]) -> string or unicode
    
    Return a copy of the string S with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping"""
        
    
    def partition():
        """S.partition(sep) -> (head, sep, tail)
    
    Search for the separator sep in S, and return the part before it,
    the separator itself, and the part after it.  If the separator is not
    found, return S and two empty strings."""
        
    
    def replace():
        """S.replace(old, new[, count]) -> string
    
    Return a copy of string S with all occurrences of substring
    old replaced by new.  If the optional argument count is
    given, only the first count occurrences are replaced."""
        
    
    def rfind():
        """S.rfind(sub [,start [,end]]) -> int
    
    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.
    
    Return -1 on failure."""
        
    
    def rindex():
        """S.rindex(sub [,start [,end]]) -> int
    
    Like S.rfind() but raise ValueError when the substring is not found."""
        
    
    def rjust():
        """S.rjust(width[, fillchar]) -> string
    
    Return S right-justified in a string of length width. Padding is
    done using the specified fill character (default is a space)"""
        
    
    def rpartition():
        """S.rpartition(sep) -> (head, sep, tail)
    
    Search for the separator sep in S, starting at the end of S, and return
    the part before it, the separator itself, and the part after it.  If the
    separator is not found, return two empty strings and S."""
        
    
    def rsplit():
        """S.rsplit([sep [,maxsplit]]) -> list of strings
    
    Return a list of the words in the string S, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator."""
        
    
    def rstrip():
        """S.rstrip([chars]) -> string or unicode
    
    Return a copy of the string S with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping"""
        
    
    def split():
        """S.split([sep [,maxsplit]]) -> list of strings
    
    Return a list of the words in the string S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are removed
    from the result."""
        
    
    def splitlines():
        """S.splitlines(keepends=False) -> list of strings
    
    Return a list of the lines in S, breaking at line boundaries.
    Line breaks are not included in the resulting list unless keepends
    is given and true."""
        
    
    def startswith():
        """S.startswith(prefix[, start[, end]]) -> bool
    
    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try."""
        
    
    def strip():
        """S.strip([chars]) -> string or unicode
    
    Return a copy of the string S with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping"""
        
    
    def swapcase():
        """S.swapcase() -> string
    
    Return a copy of the string S with uppercase characters
    converted to lowercase and vice versa."""
        
    
    def title():
        """S.title() -> string
    
    Return a titlecased version of S, i.e. words start with uppercase
    characters, all remaining cased characters have lowercase."""
        
    
    def translate():
        """S.translate(table [,deletechars]) -> string
    
    Return a copy of the string S, where all characters occurring
    in the optional argument deletechars are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256 or None.
    If the table argument is None, no translation is applied and
    the operation simply removes the characters in deletechars."""
        
    
    def upper():
        """S.upper() -> string
    
    Return a copy of the string S converted to uppercase."""
        
    
    def zfill():
        """S.zfill(width) -> string
    
    Pad a numeric string S with zeros on the left, to fill a field
    of the specified width.  The string S is never truncated."""
        



class unicode(basestring):
    """unicode(string [, encoding[, errors]]) -> object

Create a new Unicode object from the given encoded string.
encoding defaults to the current default string encoding.
errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'."""
    
    def __add__():
        """x.__add__(y) <==> x+y"""
        
    
    def __contains__():
        """x.__contains__(y) <==> y in x"""
        
    
    def __delattr__():
        """x.__delattr__('name') <==> del x.name"""
        
    
    def __eq__():
        """x.__eq__(y) <==> x==y"""
        
    
    def __format__():
        """S.__format__(format_spec) -> unicode
    
    Return a formatted version of S as described by format_spec."""
        
    
    def __ge__():
        """x.__ge__(y) <==> x>=y"""
        
    
    def __getattribute__():
        """x.__getattribute__('name') <==> x.name"""
        
    
    def __getitem__():
        """x.__getitem__(y) <==> x[y]"""
        
    
    def __getnewargs__():
        
    
    def __getslice__():
        """x.__getslice__(i, j) <==> x[i:j]
               
               Use of negative indices is not supported."""
        
    
    def __gt__():
        """x.__gt__(y) <==> x>y"""
        
    
    def __hash__():
        """x.__hash__() <==> hash(x)"""
        
    
    def __init__():
        """x.__init__(...) initializes x; see help(type(x)) for signature"""
        
    
    def __le__():
        """x.__le__(y) <==> x<=y"""
        
    
    def __len__():
        """x.__len__() <==> len(x)"""
        
    
    def __lt__():
        """x.__lt__(y) <==> x<y"""
        
    
    def __mod__():
        """x.__mod__(y) <==> x%y"""
        
    
    def __mul__():
        """x.__mul__(n) <==> x*n"""
        
    
    def __ne__():
        """x.__ne__(y) <==> x!=y"""
        
    
    def __new__():
        """T.__new__(S, ...) -> a new object with type S, a subtype of T"""
        
    
    def __reduce__():
        """helper for pickle"""
        
    
    def __reduce_ex__():
        """helper for pickle"""
        
    
    def __repr__():
        """x.__repr__() <==> repr(x)"""
        
    
    def __rmod__():
        """x.__rmod__(y) <==> y%x"""
        
    
    def __rmul__():
        """x.__rmul__(n) <==> n*x"""
        
    
    def __setattr__():
        """x.__setattr__('name', value) <==> x.name = value"""
        
    
    def __sizeof__():
        """S.__sizeof__() -> size of S in memory, in bytes
    
    """
        
    
    def __str__():
        """x.__str__() <==> str(x)"""
        
    
    def __subclasshook__():
        """Abstract classes can override this to customize issubclass().
    
    This is invoked early on by abc.ABCMeta.__subclasscheck__().
    It should return True, False or NotImplemented.  If it returns
    NotImplemented, the normal algorithm is used.  Otherwise, it
    overrides the normal algorithm (and the outcome is cached).
    """
        
    
    def _formatter_field_name_split():
        
    
    def _formatter_parser():
        
    
    def capitalize():
        """S.capitalize() -> unicode
    
    Return a capitalized version of S, i.e. make the first character
    have upper case and the rest lower case."""
        
    
    def center():
        """S.center(width[, fillchar]) -> unicode
    
    Return S centered in a Unicode string of length width. Padding is
    done using the specified fill character (default is a space)"""
        
    
    def count():
        """S.count(sub[, start[, end]]) -> int
    
    Return the number of non-overlapping occurrences of substring sub in
    Unicode string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation."""
        
    
    def decode():
        """S.decode([encoding[,errors]]) -> string or unicode
    
    Decodes S using the codec registered for encoding. encoding defaults
    to the default encoding. errors may be given to set a different error
    handling scheme. Default is 'strict' meaning that encoding errors raise
    a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
    as well as any other name registered with codecs.register_error that is
    able to handle UnicodeDecodeErrors."""
        
    
    def encode():
        """S.encode([encoding[,errors]]) -> string or unicode
    
    Encodes S using the codec registered for encoding. encoding defaults
    to the default encoding. errors may be given to set a different error
    handling scheme. Default is 'strict' meaning that encoding errors raise
    a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
    'xmlcharrefreplace' as well as any other name registered with
    codecs.register_error that can handle UnicodeEncodeErrors."""
        
    
    def endswith():
        """S.endswith(suffix[, start[, end]]) -> bool
    
    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try."""
        
    
    def expandtabs():
        """S.expandtabs([tabsize]) -> unicode
    
    Return a copy of S where all tab characters are expanded using spaces.
    If tabsize is not given, a tab size of 8 characters is assumed."""
        
    
    def find():
        """S.find(sub [,start [,end]]) -> int
    
    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.
    
    Return -1 on failure."""
        
    
    def format():
        """S.format(*args, **kwargs) -> unicode
    
    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}')."""
        
    
    def index():
        """S.index(sub [,start [,end]]) -> int
    
    Like S.find() but raise ValueError when the substring is not found."""
        
    
    def isalnum():
        """S.isalnum() -> bool
    
    Return True if all characters in S are alphanumeric
    and there is at least one character in S, False otherwise."""
        
    
    def isalpha():
        """S.isalpha() -> bool
    
    Return True if all characters in S are alphabetic
    and there is at least one character in S, False otherwise."""
        
    
    def isdecimal():
        """S.isdecimal() -> bool
    
    Return True if there are only decimal characters in S,
    False otherwise."""
        
    
    def isdigit():
        """S.isdigit() -> bool
    
    Return True if all characters in S are digits
    and there is at least one character in S, False otherwise."""
        
    
    def islower():
        """S.islower() -> bool
    
    Return True if all cased characters in S are lowercase and there is
    at least one cased character in S, False otherwise."""
        
    
    def isnumeric():
        """S.isnumeric() -> bool
    
    Return True if there are only numeric characters in S,
    False otherwise."""
        
    
    def isspace():
        """S.isspace() -> bool
    
    Return True if all characters in S are whitespace
    and there is at least one character in S, False otherwise."""
        
    
    def istitle():
        """S.istitle() -> bool
    
    Return True if S is a titlecased string and there is at least one
    character in S, i.e. upper- and titlecase characters may only
    follow uncased characters and lowercase characters only cased ones.
    Return False otherwise."""
        
    
    def isupper():
        """S.isupper() -> bool
    
    Return True if all cased characters in S are uppercase and there is
    at least one cased character in S, False otherwise."""
        
    
    def join():
        """S.join(iterable) -> unicode
    
    Return a string which is the concatenation of the strings in the
    iterable.  The separator between elements is S."""
        
    
    def ljust():
        """S.ljust(width[, fillchar]) -> int
    
    Return S left-justified in a Unicode string of length width. Padding is
    done using the specified fill character (default is a space)."""
        
    
    def lower():
        """S.lower() -> unicode
    
    Return a copy of the string S converted to lowercase."""
        
    
    def lstrip():
        """S.lstrip([chars]) -> unicode
    
    Return a copy of the string S with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is a str, it will be converted to unicode before stripping"""
        
    
    def partition():
        """S.partition(sep) -> (head, sep, tail)
    
    Search for the separator sep in S, and return the part before it,
    the separator itself, and the part after it.  If the separator is not
    found, return S and two empty strings."""
        
    
    def replace():
        """S.replace(old, new[, count]) -> unicode
    
    Return a copy of S with all occurrences of substring
    old replaced by new.  If the optional argument count is
    given, only the first count occurrences are replaced."""
        
    
    def rfind():
        """S.rfind(sub [,start [,end]]) -> int
    
    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.
    
    Return -1 on failure."""
        
    
    def rindex():
        """S.rindex(sub [,start [,end]]) -> int
    
    Like S.rfind() but raise ValueError when the substring is not found."""
        
    
    def rjust():
        """S.rjust(width[, fillchar]) -> unicode
    
    Return S right-justified in a Unicode string of length width. Padding is
    done using the specified fill character (default is a space)."""
        
    
    def rpartition():
        """S.rpartition(sep) -> (head, sep, tail)
    
    Search for the separator sep in S, starting at the end of S, and return
    the part before it, the separator itself, and the part after it.  If the
    separator is not found, return two empty strings and S."""
        
    
    def rsplit():
        """S.rsplit([sep [,maxsplit]]) -> list of strings
    
    Return a list of the words in S, using sep as the
    delimiter string, starting at the end of the string and
    working to the front.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified, any whitespace string
    is a separator."""
        
    
    def rstrip():
        """S.rstrip([chars]) -> unicode
    
    Return a copy of the string S with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is a str, it will be converted to unicode before stripping"""
        
    
    def split():
        """S.split([sep [,maxsplit]]) -> list of strings
    
    Return a list of the words in S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are
    removed from the result."""
        
    
    def splitlines():
        """S.splitlines(keepends=False) -> list of strings
    
    Return a list of the lines in S, breaking at line boundaries.
    Line breaks are not included in the resulting list unless keepends
    is given and true."""
        
    
    def startswith():
        """S.startswith(prefix[, start[, end]]) -> bool
    
    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try."""
        
    
    def strip():
        """S.strip([chars]) -> unicode
    
    Return a copy of the string S with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is a str, it will be converted to unicode before stripping"""
        
    
    def swapcase():
        """S.swapcase() -> unicode
    
    Return a copy of S with uppercase characters converted to lowercase
    and vice versa."""
        
    
    def title():
        """S.title() -> unicode
    
    Return a titlecased version of S, i.e. words start with title case
    characters, all remaining cased characters have lower case."""
        
    
    def translate():
        """S.translate(table) -> unicode
    
    Return a copy of the string S, where all characters have been mapped
    through the given translation table, which must be a mapping of
    Unicode ordinals to Unicode ordinals, Unicode strings or None.
    Unmapped characters are left untouched. Characters mapped to None
    are deleted."""
        
    
    def upper():
        """S.upper() -> unicode
    
    Return a copy of S converted to uppercase."""
        
    
    def zfill():
        """S.zfill(width) -> unicode
    
    Pad a numeric string S with zeros on the left, to fill a field
    of the specified width. The string S is never truncated."""
        


@lazy_attribute
def re_pytokens(cls):
    """ This matches comments and all kinds of quoted strings but does
            NOT match comments (#...) within quoted strings. (trust me) """
    return re.compile('\n            (\'\'(?!\')|""(?!")|\'{6}|"{6}    # Empty strings (all 4 types)\n             |\'(?:[^\\\\\']|\\\\.)+?\'          # Single quotes (\')\n             |"(?:[^\\\\"]|\\\\.)+?"          # Double quotes (")\n             |\'{3}(?:[^\\\\]|\\\\.|\\n)+?\'{3}  # Triple-quoted strings (\')\n             |"{3}(?:[^\\\\]|\\\\.|\\n)+?"{3}  # Triple-quoted strings (")\n             |\\#.*                        # Comments\n            )', re.VERBOSE)

def title():
    print '\n\t   d3hydr8[at]gmail[dot]com RFI Scanner v1.0'
    print '\t-----------------------------------------------'
' *(?P<key>'.+') *=> *'
'# Invalid object specification: '(?P<t>.+)''
'#([^']+?)# \\(qv\\)'
'#prefs.add\\('python_path', '~/python/'\\)'
''
'''
''''
''''(.+?)''''
'''|\\\\([0-7]{1,3}|.)'
''((?:[^']|(?:''))*)''
''(.*)'$'
''(.*)''
''(.*?)''
''(.*?)(?<!\\\\)',?'
''(..+)'\\s+(..+$)'
''(?:[^'\\\\]|\\\\.)*''
''(?:[^']|'')*'$'
''(?P<key>[^:]*)'\\:(?P<value>[^,]*),'
''([..\\n]+)'\\s+(..+$)'
''([0-9.]+)''
''([^']+?)' \\(qv\\)'
''(\\\\.[^\\\\]*|[^\\\\])''
''.''
''.*'
''.*'$'
''.*?''
'':false,'
'':true,'
''>$'
''?([^']*)'?!((\\$([A-Za-z]+))?\\$([0-9]+)(:(\\$([A-Za-z]+))?(\\$([0-9]+)))?)$'
''Page\\$(\\d*)'
''[^']*''
''\\.\\./([^']*)''
''\\?(.)''
''file'\\s*:\\s*'(.*)''
'(''')\\s*$'
'('(?:[^']|(?:''))*')'
'('.')\\s*(.*)'
'('[{}]')'
'('|\x00|%)'
'((?:\\'[^\\'\\n\\r]*\\')+)'
'((?<=\\()[A-Za-z][A-Za-z0-9\\+\\.\\-]*:([A-Za-z0-9\\.\\-_~:/\\?#\\[\\]@!\\$&'\\(\\)\\*\\+,;=]|%[A-Fa-f0-9]{2})+(?=\\)))|([A-Za-z][A-Za-z0-9\\+\\.\\-]*:([A-Za-z0-9\\.\\-_~:/\\?#\\[\\]@!\\$&'\\(\\)\\*\\+,;=]|%[A-Fa-f0-9]{2})+)|\\bmailto:\\S*[^\\s\\W]|\\b\\S+@\\S+\\.\\S*[^\\s\\W]|((?<=\\()(www|ftp)\\.([A-Za-z0-9\\.\\-_~:/\\?#\\[\\]@!\\$&'\\(\\)\\*\\+,;=]|%[A-Fa-f0-9]{2})+(?=\\)))|((www|ftp)\\.([A-Za-z0-9\\.\\-_~:/\\?#\\[\\]@!\\$&'\\(\\)\\*\\+,;=]|%[A-Fa-f0-9]{2})+\\.([A-Za-z0-9\\.\\-_~:/\\?#\\[\\]@!\\$&'\\(\\)\\*\\+,;=]|%[A-Fa-f0-9]{2})+)'
'((?P<prefix>[$@%\\\\*&]+)\\s*)?(?P<scope>(::)?\\b((?!\\d)\\w*?(::|'))*)(?P<name>(?!\\d)\\w+)$'
'(.*?)',''
'(<module 'epydoc_test' from ).*'
'(?:[-a-zA-Z0-9!$&'\\(\\)\\*+,;=._~]|%[a-zA-Z0-9]{2})+$'
'(?<!\\\\)''
'(?<=SECRET_KEY = ')''
'(?i)(.)('ll|'re|'ve|n't|'s|'m|'d)\\b'
'(?i)\\b(D)('ye)\\b'
'(?i)\\b(Mor)('n)\\b'
'(?im)^what's new in (.*?)\\??$'
'(?mx) ([^';]* (?:'[^']*'[^';]*)*)'
'(?u)([^\\w\\.\\'\\-\\/,&])'
'(?x)\n        # Tokenize the input into keyword, separator, noise\n        ([a-zA-Z0-9_]+)         |   # A keyword is a alphanum word\n        ( \\. | \\:\\: | \\-\\> )    |   # These are the allowed separators\n        (.)                         # If it doesn't fit, it's noise.\n            # Matching a single noise char is enough, because it\n            # is used to break the tokenization as soon as some noise\n            # is found.\n        '
'(['])'
'([,']\\s)'
'([0-9]+)''
'([\\\\'])'
'([\\w.!~*'|;:&=+$,-]+@)?(([A-Za-z0-9]+[A-Za-z0-9\\-]*[A-Za-z0-9]+\\.)*([A-Za-z0-9]+\\.)*)*([A-Za-z]+[A-Za-z0-9\\-]*[A-Za-z0-9]+)\\.?(:\\d*)*$'
'([\\w.!~*'|;:&=+$,-]+@)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d*)*$'
'([\\w\\-\\.]+)='([^']+)''
'([\\x20\\x21\\x23-\\x5B\\x5D-\\x7E\xa0-\uffff]+)'
'([\x80-\uffff])'
'([^'\\\\]|\\\\(.|$))+'
'([a-z])'([A-Z])'
'([a-z]+)([,']*)'
'([a-z_]+) '(.*)'\\t(.*)\\tLoc=<(.*):(.*):(.*)>'
'(\\'\\'\\'(?P<txt>.*?)\\'\\'\\')'
'(\\'\\'\\'\\'\\'(?P<txt>.*?)\\'\\'\\'\\'\\')'
'(\\\\*)(['`:*~\\\\[\\]{}@\\$+\\-.#])'
'(\\w+)\\'(m|re|d|ve|s|ll|t)?'
'(^[A-Za-z\\' ]+$)'
'(^[A-Za-z\\' ]+)$'
'(^\\s+Address 0x)[0-9A-Fa-f]+( is )\\d+( bytes inside a block of size )[0-9,]+( free'd)'
'(^\\s+Address 0x)[0-9A-Fa-f]+( is not stack'd)'
'(^|[^'])'''(.+?)'''($|[^'])'
'(^|\\W)`(.*?)'(\\W|$)'
'(cimport +([0-9a-zA-Z_.]+)\\b)|(from +([0-9a-zA-Z_.]+) +cimport)|(include +'([^']+)')|(cdef +extern +from +'([^']+)')'
'(nextval\\(')([^']+)('.*$)'
'*'
'.*'(.*)'.*'(.*)'.*'
'.*?''''
'.*Access denied for user '[\\w\\*\\!\\@\\#\\^\\&]*'@'[\\w\\.]*'.*'
'.*Host '[\\w\\.]*' is not allowed to connect to this MySQL server.*'
'.*thumbnail:\\s*'(http://[^/]+/ThumbnailServer2[^']+)'.*'
'.*window\\.location\\.href='(?P<href>.*)'.*'
'.+conffile-prompt : '(.+)' '(.+)''
'.NET[\\/\\]VC7'
'<[fF][oO][nN][tT][ ]*[sS][iI][zZ][eE][ ]*='2'[ ]*>'
'<\\w+[^>]*>|</\\w+>|[\\w\\']+|\\s+|[^\\w\\'\\s<>/]+'
'<a href='(?P<link>proxylist_full_[_a-zA-Z0-9]+.html)'>'
'<a href='anon/(?P<n>[0-9]+).html'>anon #'
'<a href='elite/(?P<n>[0-9]+).html'>elite #'
'<a href='nonanon/(?P<n>[0-9]+).html'>nonanon #'
'<class '([A-Za-z0-9.]+)'>(\\..+)?'
'<class \\'sympy[\\w.]*?.([\\w]*)\\'>$'
'<div class='lyricbox'><div class='rtMatcher'>.*?</div>(.*?)<!--'
'<link rel=\\'image_src\\' href=\\'(http://is[0-9].myvideo\\.de/de/movie[0-9]+/[a-f0-9]+)/thumbs/[^.]+\\.jpg\\' />'
'<tr><td>([A-Za-z ]+)</td><td class='number'>\\$([\\d,]+)</td><td class='number'>\\$([\\d,]+)</td><td class='number'>\\$([\\d,]+)</td></tr>'
'<|&|''
'?(i)mochitest'
'?(i)reftest'
'@'([^']+)''
'@import '([a-zA-Z0-9_-]+)';'
'APACHEPATH.'([^']*?)''
'AddLocation\\((.*?')\\)'
'Can't connect to local MySQL server through socket'
'Change (?P<num>\\d+) on \\S+ by \\S+@\\S+ '.+'$'
'Couldn't find index page for '[^']+' \\(maybe misspelled\\?\\)\n'
'Couldn't start forwarder server for port spec: (\\d+):(\\d+)'
'Decimal\\('(\\d+(\\.\\d*)?)'\\)'
'Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \\[.*QPCIBus.*, .*QStrictCustomBus.*\\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \\[\\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \\[\\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \\[\\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \\[.*QIDEBus.*\\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \\(\\)\n  child_bus = \\[.*QFloppyBus.*\\]\n  params:'
'File '([^\n]*)'.*?:creating '([^\n]*)''
'I couldn't open style file'
'INFO: T.* (has been created by T.* at this point|is program's main thread)'
'LOCALROOT.'([^']*?)''
'NET 2003[\\/\\]VC7'
'PREFIX\\('.*?'\\)(.*?)\\(.*'
'ProtEOnlineLoad\\((.*), 'false'\\);'
'Success: created profile .* at '([^']+)''
'This module \\'\\w+\\' is auto-generated with f2py'
'USINGXAMPP.'([^']*?)''
'Unused options for buildout: 'eggs' 'scripts'\\.'
'VERSION = '([^']*)''
'VERSION = '([^']+)''
'VERSION.*'(.+)''
'Warning--I didn't find a database entry'
'XAMPPPATH.'([^']*?)''
'[$^#\\\\']'
'[- \n\t\ra-zA-Z0-9'()+,./:=?;!*#@$_%]*'
'[-A-Za-z0-9!\\#$%&'*+/=?^_`{|}~]'
'[/!:?\\-,\\']'
'[A-Za-z0-9;/?:@&=+$,\\-_\\.!~*'\\(\\)%#]+$'
'[Ee]rr(or)?: (?P<error>.+?(Syntax error at \\'(?P<near>.+?)\\'; expected \\'.+\\')) at /.+?:(?P<line>\\d+)?'
'[[\\s $({?*\\`#~';<>&|]'
'[\\']([a-zA-Z0-9]+)[\\']'
'[\\\\\\"\\a\\b\\f\\r\\v\\t\\n\x80-\uffff]'
'[\\\\\\"\\a\\b\\f\\r\\v\x80-\uffff]'
'[\\s'\\\\]'
'[\\w!\\#$%&'*+-\\/=?^_`{|}~]+'
'[\\w']+'
'[\\w\\-\\'_/&]+'
'[\t\n #$%&'()*;<=>?[{|}~]|^$'
'[]'
'[^ ']*::[^ ']*'
'[^ \r\na-zA-Z0-9\\-'()+,./:=?;!*#@$_%]'
'[^'\\\\]*(?:\\\\.[^'\\\\]*)*''
'[^']*'
'[^']*'([^']*)'.*'
'[^']*('[^']*'[^']*)*\\:(?P<clob>CLOB\\('([^']+|'')*'\\))'
'[^']+'
'[^<']*'
'[^A-Za-z0-9\\-_.~!*'();:@&=+$,/?%#[\\]]'
'[^A-Za-z\\-0-9 $&\\.\\,:;/'\\!\\(\\)]'
'[^\\w!#$%&'*+,.:;<=>?^`|~-]'
'[^\t\n\r -~\x85\xa0-\\uD7FF\\uE000-\\uFFFD]'
'[^\t\n\r -~\x85\xa0-\ud7ff\ue000-\ufffd]'
'[a-z\\-' \n\t]'
'[uU]('.*?')'
'\\''
'\\*(\\w(\\w|')*)\\*(.*)'
'\\.(\\w+)'>'
'\\?\\?[=/\\'\\(\\)\\!<>\\-]'
'\\[(?P<tag>\\w+)\\]\\s*\\=\\s*\\'(?P<value>\\w+)\\''
'\\\\''
'\\\\(['`:*~\\\\[\\]{}@\\$+\\-.#])'
'\\\\openout.*`(.*)''
'\\\\openout.*`(.*\\.aux)''
'\\`(Tr|IX)\\' not defined|No such file or directory|(can\\'t break|cannot adjust) line'
'\\b'(?=\\d{2}s)'
'\\bsub\\s+(\\w+(::|'))*\\w+$'
'\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3} (\\d|\\.)+  players: \\['(?P<player1>\\w+)', '(?P<player2>\\w+)', '(?P<player3>\\w+)', '(?P<player4>\\w+)'\\] winner (?P<winner>\\w+)'
'\\s*<?xml\\b.*\\bencoding='([^']+)''
'\\s*SELECT\\s+.+?\\s+FROM\\s+[']?(\\w+)'
'\\s*index.append\\('(.+)'\\)\\s*'
'\\s+\\(default:\\s+\\'(.*)\\'\\)$'
'\\svalues\\s*(\\(((?<!\\\\)'[^\\)]*?\\)[^\\)]*(?<!\\\\)?'|[^\\(\\)]|(?:\\([^\\)]*\\)))+\\))'
'\\{([a-zA-Z\\']+)\\}'
'\n        # Grab the traceback header.  Different versions of Python have\n        # said different things on the first traceback line.\n        ^(?P<hdr> Traceback\\ \\(\n            (?: most\\ recent\\ call\\ last\n            |   innermost\\ last\n            ) \\) :\n        )\n        \\s* $                # toss trailing whitespace on the header.\n        (?P<stack> .*?)      # don't blink: absorb stuff until...\n        ^ (?P<msg> \\w+ .*)   #     a line *starts* with alphanum.\n        '
'\n        (                           # Wrap whole match in \\1\n          (\n            ^[ \\t]*>[ \\t]?          # '>' at the start of a line\n              .+\\n                  # rest of the first line\n            (.+\\n)*                 # subsequent consecutive lines\n            \\n*                     # blanks\n          )+\n        )\n        '
'\n        ^(?!\\.)                            # name may not begin with a dot\n        (\n          [-a-z0-9!\\#$%&'*+/=?^_`{|}~]     # all legal characters except dot\n          |\n          (?<!\\.)\\.                        # single dots only\n        )+\n        (?<!\\.)                            # name may not end with a dot\n        @\n        (\n          localhost\n          |\n          (\n            [a-z0-9]                         # [sub]domain begins with alphanumeric\n            (\n              [-\\w]*                         # alphanumeric, underscore, dot, hyphen\n              [a-z0-9]                       # ending alphanumeric\n            )?\n          \\.                               # ending dot\n          )+\n          [a-z]{2,}                        # TLD alpha-only\n       )$\n    '
'\n        ^(\\#{1,6})  # \\1 = string of #'s\n        [ \\t]*\n        (.+?)       # \\2 = Header text\n        [ \\t]*\n        (?<!\\\\)     # ensure not an escaped trailing '#'\n        \\#*         # optional closing #'s (not counted)\n        \\n+\n        '
'\n        ^\n        (?:\n          # Dotted variants:\n          (?:\n            # Decimal 1-255 (no leading 0's)\n            [3-9]\\d?|2(?:5[0-5]|[0-4]?\\d)?|1\\d{0,2}\n          |\n            0x0*[0-9a-f]{1,2}  # Hexadecimal 0x0 - 0xFF (possible leading 0's)\n          |\n            0+[1-3]?[0-7]{0,2} # Octal 0 - 0377 (possible leading 0's)\n          )\n          (?:                  # Repeat 0-3 times, separated by a dot\n            \\.\n            (?:\n              [3-9]\\d?|2(?:5[0-5]|[0-4]?\\d)?|1\\d{0,2}\n            |\n              0x0*[0-9a-f]{1,2}\n            |\n              0+[1-3]?[0-7]{0,2}\n            )\n          ){0,3}\n        |\n          0x0*[0-9a-f]{1,8}    # Hexadecimal notation, 0x0 - 0xffffffff\n        |\n          0+[0-3]?[0-7]{0,10}  # Octal notation, 0 - 037777777777\n        |\n          # Decimal notation, 1-4294967295:\n          429496729[0-5]|42949672[0-8]\\d|4294967[01]\\d\\d|429496[0-6]\\d{3}|\n          42949[0-5]\\d{4}|4294[0-8]\\d{5}|429[0-3]\\d{6}|42[0-8]\\d{7}|\n          4[01]\\d{8}|[1-3]\\d{0,9}|[4-9]\\d{0,8}\n        )\n        $\n    '
'\n        ^\n        \\s*\n        (?P<operator>(~=|==|!=|<=|>=|<|>|===))\n        (?P<version>\n            (?:\n                # The identity operators allow for an escape hatch that will\n                # do an exact string match of the version you wish to install.\n                # This will not be parsed by PEP 440 and we cannot determine\n                # any semantic meaning from it. This operator is discouraged\n                # but included entirely as an escape hatch.\n                (?<====)  # Only match for the identity operator\n                \\s*\n                [^\\s]*    # We just match everything, except for whitespace\n                          # since we are only testing for strict identity.\n            )\n            |\n            (?:\n                # The (non)equality operators allow for wild card and local\n                # versions to be specified so we have to define these two\n                # operators separately to enable that.\n                (?<===|!=)            # Only match for equals and not equals\n\n                \\s*\n                v?\n                (?:[0-9]+!)?          # epoch\n                [0-9]+(?:\\.[0-9]+)*   # release\n                (?:                   # pre release\n                    [-_\\.]?\n                    (a|b|c|rc|alpha|beta|pre|preview)\n                    [-_\\.]?\n                    [0-9]*\n                )?\n                (?:                   # post release\n                    (?:-[0-9]+)|(?:[-_\\.]?(post|rev|r)[-_\\.]?[0-9]*)\n                )?\n\n                # You cannot use a wild card and a dev or local version\n                # together so group them with a | and make them optional.\n                (?:\n                    (?:[-_\\.]?dev[-_\\.]?[0-9]*)?         # dev release\n                    (?:\\+[a-z0-9]+(?:[-_\\.][a-z0-9]+)*)? # local\n                    |\n                    \\.\\*  # Wild card syntax of .*\n                )?\n            )\n            |\n            (?:\n                # The compatible operator requires at least two digits in the\n                # release segment.\n                (?<=~=)               # Only match for the compatible operator\n\n                \\s*\n                v?\n                (?:[0-9]+!)?          # epoch\n                [0-9]+(?:\\.[0-9]+)+   # release  (We have a + instead of a *)\n                (?:                   # pre release\n                    [-_\\.]?\n                    (a|b|c|rc|alpha|beta|pre|preview)\n                    [-_\\.]?\n                    [0-9]*\n                )?\n                (?:                                   # post release\n                    (?:-[0-9]+)|(?:[-_\\.]?(post|rev|r)[-_\\.]?[0-9]*)\n                )?\n                (?:[-_\\.]?dev[-_\\.]?[0-9]*)?          # dev release\n            )\n            |\n            (?:\n                # All other operators only allow a sub set of what the\n                # (non)equality operators do. Specifically they do not allow\n                # local versions to be specified nor do they allow the prefix\n                # matching wild cards.\n                (?<!==|!=|~=)         # We have special cases for these\n                                      # operators so we want to make sure they\n                                      # don't match here.\n\n                \\s*\n                v?\n                (?:[0-9]+!)?          # epoch\n                [0-9]+(?:\\.[0-9]+)*   # release\n                (?:                   # pre release\n                    [-_\\.]?\n                    (a|b|c|rc|alpha|beta|pre|preview)\n                    [-_\\.]?\n                    [0-9]*\n                )?\n                (?:                                   # post release\n                    (?:-[0-9]+)|(?:[-_\\.]?(post|rev|r)[-_\\.]?[0-9]*)\n                )?\n                (?:[-_\\.]?dev[-_\\.]?[0-9]*)?          # dev release\n            )\n        )\n        \\s*\n        $\n        '
'\n    (                       # Wrap whole match in $1\n     (\n       ^[ \\t]*&gt;[ \\t]?       # '>' at the start of a line\n       .+\\n                 # rest of the first line\n       (.+\\n)*              # subsequent consecutive lines\n       \\n*                  # blanks\n      )+\n    )'
'\n    (                       # Wrap whole match in $1\n     (\n       ^[ \\t]*>[ \\t]?       # '>' at the start of a line\n       .+\\n                 # rest of the first line\n       (.+\\n)*              # subsequent consecutive lines\n       \\n*                  # blanks\n      )+\n    )'
'\n    (?:'[^'\\n\\r]*')+|\n    <=|>=|!=|=|<|>|\n    :\\w+|\n    ,|\n    \\*|\n    -?\\d+(?:\\.\\d+)?|\n    \\w+|\n    \\(|\\)|\n    \\S+\n    '
'\n    (?:'[^'\\n\\r]*')+|\n    <=|>=|=|<|>|\n    :\\w+|\n    ,|\n    \\*|\n    -?\\d+(?:\\.\\d+)?|\n    \\w+|\n    \\(|\\)|\n    \\S+\n    '
'\n    (?P<SN>.*?)         # NG(SN) non greedily capturing show name\n    (?P<OB>\\[)?         # Optional Literal [ - NG(OB) for matching bracket later\n    (?P<S>\\d{1,2})      # NG(S) capturing 1/2 digits for season no\n    \\ ?                 # Optional Space\n    [-x]                # Literal - or x\n    \\ ?                 # Optional Space\n    (?P<E>\\d{1,2})      # NG(E) capturing 1/2 digits for episode no\n    (?(OB)\\])           # Matchs literal ] if [ occured earlier\n    (?P<EN>.*)          # NG(EN) greedily trying to grab episode name'
'\n(?P<ret>(-|\\w|\\&|\\*)+\\s*)  # return type\n\\s+                   # skip whitespace\n(?P<func>\\w+)\\s*[(]   # match the function name until the opening (\n\\s*(?P<args>.*?)\\s*[)]     # group the function arguments\n'
'\nUnused options for buildout: '(distribute|setuptools)\\-version'\\.'
'^     Sources: ''
'^    version='(...+)',$'
'^ \\s+ return \\s+ '([0-9.]+)';'
'^# Your branch is (ahead of|behind) '(.*)' by (\\d+) commit'
'^'''(.*?)'''\\s*(#.*)?$'
'^'(.*)'$'
'^'(.+)'@'
'^'([^']+)'(\\|.*$)'
'^'.*''
'^((?:'[^']*'|[^'])*?)--.*$'
'^(.*?)'''\\s*(#.*)?$'
'^(FFLAGS\\s*=').*-m64 (.*)'
'^([0-9a-f-]{36}) maps to '(.+)' ([0-9a-f]{32}) \\((.+)\\)$'
'^([A-Za-z '\\(\\)]+) (\\([0-9A-F]+,[0-9A-F]+\\)) (.*)$'
'^([A-Za-z '\\(\\)]+) (\\([0-9A-F]+,[0-9A-F]+\\)) ([0-9C]+) (.*)$'
'^([\\w\\!\\#$\\%\\&'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$'
'^([^=]+)=\\'(.*)\\'$'
'^([a-zA-Z'\\-]+)$'
'^(\\S+) == (u?'[^']*'|\\([0-9, ]+\\))$'
'^(\\w[\\s\\w'.-]*)(\\((.*)\\))?'
'^.*: Opening '(.*)' for reading$'
'^<type ''
'^Comdat:\\s+(.+)\\s+SEGMENT NONE '(\\w+)'\\s+([0-9a-fA-F]+)\\s+bytes$'
'^File '([^\n]*)'$'
'^Function.*has unrooted.*of type.*live across GC call ('?)(.*?)('?) at \\S+:\\d+$'
'^Latest checkpoint's REDO location:\\s+([0-9A-F]+)/([0-9A-F]+)'
'^Latest checkpoint's TimeLineID:\\s+(\\d+)'
'^[A-Za-z '\\(\\)]+ +\\([0-9A-F]+,[0-9A-F]+\\) +(.*)$'
'^[A-Za-z0-9\\' -]+$'
'^[A-Za-z0-9\xc2\xb5 /()'>-]+\\s+\\([0-9A-Fx]+,[0-9A-F]+\\)\\s+[1-3][C]*\\s+(.*)$'
'^\\$db\\s*=\\s*'\\w+''
'^\\$host\\s*=\\s*'\\w+''
'^\\$pass\\s*=\\s*'\\w+''
'^\\$user\\s*=\\s*'\\w+''
'^\\d* *([\\w.,'\\s]+)$'
'^\\s*([A-Za-z0-9 '/-]+)\\s+\\(([0-9]+),([0-9A-Fa-fx]+)\\)\\s+([1-3])\\s+.*$'
'^\\s*([A-Za-z0-9'./> -]+)\\s+\\(?([0-9A-F]+),([0-9A-FxXY]+)\\)?\\s+([A-Z][A-Z])\\s+([1-3C]+)?,?.*\\s*$'
'^\\s*.*?\\s*(\\S+)=\\'(.*)\\'\\s*.*$'
'^\\s*archive_mode\\s*=\\s*'?([a-zA-Z01]+)'?\\s*#?.*$'
'^\\s*synchronous_standby_names\\s*=\\s*'([^']*)'\\s*#?.*$'
'^\\s*wal_level\\s*=\\s*'?([a-z_]+)'?\\s*#?.*$'
'^\n\\s*((?:-|\\w|\\&|\\*)+)  # return type\n\\s+                   # skip whitespace\n([a-z]\\w+)\\s*[(]      # match the function name until the opening (\n\\s*(.*?)\\s*[)].*      # group the function arguments\n$'
'^area_at\\(([0-9]+),([0-9]+),([0-9]+),([0-9]+)\\).should_contain_text '(.*)''
'_(\\w(\\w|')*)_(.*)'
'__([a-z]+)__ = '([^']+)''
'__version__ = '([^']+)''
'arch='.*''
'dbname='(.+)''
'devmo_url\\(_\\('(?P<path>[\\w/_]+)'\\)\\)'
'documentSelected\\(\\'(\\w*)\\',\\'([\\w\\d-]*)\\',\\'([\\w\\.\\-]*)\\',\\'([\\w\\d/]*)\\',\\'([\\w\\d]*)\\',\\'([\\w\\s]*)\\''
'document\\.write\\('(\\w+)'\\)'
'domain type='.*''
'download_url:'([^']+)''
'encoding='([^']+)''
'err: (?P<error>.+?(Syntax error at \\'(?P<near>.+?)\\'; expected \\'.+\\')) at /.+?:(?P<line>\\d+)?'
'goog.require\\('([^']*)'\\)'
'hideTxt\\('(?P<txt>.+)'\\);'
'invalid literal for int().*: '?'?'
'invalid literal for int().*: s?'?0xOoops'?'
'invalid literal for long().*: '?0xOoops'?'
'jsclassref='([^']*)''
'l_ngettext, u?'\\%\\(num\\)s apple', u?'\\%\\(num\\)s apples', 3'
'location\\.href='(.*?)''
'machine type='.*''
'name '(?P<symbol>[A-Za-z_][A-Za-z0-9_]*)' is not defined'
'name='csrfmiddlewaretoken' value='([^']*)''
'package: .*name=\\'(\\S*)\\''
'pretty-date'>on ([\\w]+ [\\d]+, [\\d]+ \\d+:\\d+)</abbr></h2>'
'queryUrl\\(-1,'([^']{40})'
'releaseDate.*=.*'(?P<date>.*)';'
'replace\\(':',\\s*','\\)'
'same instance as 0x[0-9a-fA-F]+ 'abc''
'title:'([^']+?)''
'trailerTitle.*=.*'(?P<name>.*)';'
'u?'(.*)' != u?'(.*)''
'user:'([^']+?)''
'var ftoken = '(.+?)';'
'version\\s*=\\s*'(\\d+)\\.(\\d+)\\.(\\d+)([a-zA-Z0-9]*)''
'voteSelected\\(\\'(\\d*)\\',\\'(\\d*)\\',\\'(\\d*)\\',\\'(.*)\\',\\'(\\d*)\\''
'was 0x[0-9a-fA-F]+ 'hi''
'{'(.*':.*)'}'
FacebookURLWidget.pattern
LangDef.ADD_STRING
LangDef.AND_STRING
LangDef.ASSIGN_STRING
LangDef.COMMENT_STRING
LangDef.DICEROLL_STRING
LangDef.DIE_SEPARATOR
LangDef.DIV_STRING
LangDef.ENDLINE_STRING
LangDef.ENDL_STRING
LangDef.EQ_STRING
LangDef.EXPLAIN_STRING
LangDef.GTE_STRING
LangDef.GT_STRING
LangDef.LTE_STRING
LangDef.LT_STRING
LangDef.MAX_STRING
LangDef.MOD_STRING
LangDef.MUL_STRING
LangDef.NEQ_STRING
LangDef.NOT_STRING
LangDef.OR_STRING
LangDef.OUT_STRING
LangDef.PEEK_STRING
LangDef.POP_STRING
LangDef.PRINT_STRING
LangDef.SUB_STRING
LangDef.TOKEN_SEPARATOR
LangDef.VARIABLE_STRING
LangDef.XOR_STRING
None
Parser.word_rule
ResumableDownloadHandler.ETAG_REGEX
TwitterURLWidget.pattern
[]
api._checkCC
api._checkNums
args.key
args.py_regex
config.RE_STACK_BOTTOM
config.RE_STACK_SKIP
config.file_regex
config.page_category_regex
config.page_dict_regex
config.page_group_regex
config.page_template_regex
config.referer_regexp
config.strip_characters
config_urls.bug_url_long
config_urls.bug_url_short
const.TAG_SPLIT_REGEX
const.USERNAME_REGEX_STRING
default.file_regex
dev_appserver_channel.CHANNEL_POLL_PATTERN
f.match
field._filter
handler.repo_regex
lookup_def.pattern
options.filter
options.ignore_files
opts.filter
opts.id_pattern
param.hostname_regex
rarity.pattern
rose.RE_OPT_CONFIG_FILE
router.acfe_match
router.args_match
router.file_match
self.version_pattern
set_.pattern
settings.PIPELINE_EMBED_PATH
settings.REGEX
settings.X509_USERNAME_REGEX
token.search
type_.pattern
val.text
