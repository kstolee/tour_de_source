Cluster stats:

nClusters: 171
TotalPatterns: 914
totalnProjects: 609
suffix: _i1.80_p0.60_k100_jacc_


cluster 0 stats:
nPatterns: 102.0
nProjects: 167
shortest: [^.]*
Features:

1: LIT|a literal character | 6.049019607843137
2: KLE|zero-or-more repetition | 1.5196078431372548
3: CG|a capture group | 1.3725490196078431
4: ANY|any non-newline char | 0.8823529411764706
5: ADD|one-or-more repetition | 0.8333333333333334
6: NCCC|negated CCC | 0.6176470588235294
7: END|end-of-line | 0.5196078431372549
8: STR|start-of-line | 0.49019607843137253
9: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.49019607843137253
10: CCC|custom character class | 0.4019607843137255
11: DEC|any of: 0123456789 | 0.22549019607843138
12: QST|zero-or-one repetition | 0.22549019607843138
13: NCG|group without capturing | 0.19607843137254902
14: WRD|[a-zA-Z0-9\_] | 0.1568627450980392
15: LZY|as few reps as possible | 0.13725490196078433
16: OR|logical or | 0.13725490196078433
17: NWSP|any non-whitespace | 0.058823529411764705
18: NLKA|sequence doesn't follow  | 0.0196078431372549
19: NWRD|non-word chars | 0.0196078431372549
20: NDEC|any non-decimal | 0.00980392156862745


0000 | 0041 | '^[ ]*(#.*)?$'
0001 | 0017 | '([.\\w-]+)\\s*(.*)$'
0002 | 0016 | '``([^`\\s]+?)``'
0003 | 0015 | '^([^=]*)=(.*)$'
0004 | 0013 | '\n    \\""" [^"\\\\]* (?:\n                     (?: \\\\. | "(?!"") )\n                     [^"\\\\]*\n                 )*\n    (?: \\""" )?\n\n|   " [^"\\\\\\n]* (?: \\\\. [^"\\\\\\n]* )* "?\n\n|   \'\'\' [^\'\\\\]* (?:\n                   (?: \\\\. | \'(?!\'\') )\n                   [^\'\\\\]*\n                )*\n    (?: \'\'\' )?\n\n|   \' [^\'\\\\\\n]* (?: \\\\. [^\'\\\\\\n]* )* \'?\n'
0005 | 0009 | '\\s*([^: ]*)\\s*:(.*)'
0006 | 0009 | '^def\\s*(\\w+)\\s*=(.*)$'
0007 | 0008 | '^([^:]*): *(.*)'
0008 | 0007 | '^([^@]*@)?([^:]*)(:.*)?'
0009 | 0006 | '[^.]*'
0010 | 0006 | '^\\[.*\\]$'
0011 | 0006 | '^\\s*\\((.*)\\)\\s*$'
0012 | 0006 | 'url\\s*\\(\\s*[^#\\s][^)]+?\\)'
0013 | 0006 | '("(?:[^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|\'(?:[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|[^\\s]+)'
0014 | 0005 | "^'(.*)'$"
0015 | 0005 | '=[^,)]+\\)$'
0016 | 0005 | '^%[%!\\w]([^:]*)[ \\t]*$'
0017 | 0005 | '([\\w.+]+)\\s*\\(#?([^,]+),\\s*([\\w ]+),\\s*([\\w :]+)\\)\\s*\\[([^\\]]+)\\]?'
0018 | 0004 | '(\\D)[.]'
0019 | 0004 | u'url\\s*\\(\\s*[^#\\s][^)]+?\\)'
0020 | 0003 | '[./\\\\]'
0021 | 0003 | '\\[.*\\]'
0022 | 0003 | '^\\[.*\\]'
0023 | 0003 | "(''')\\s*$"
0024 | 0003 | '"([^"]+)"|(\\S+)'
0025 | 0003 | '^ *(.*) *( *) *$'
0026 | 0003 | '^[\'"](.*)[\'"]$'
0027 | 0003 | '^(.+)[:(]\\d+[:)]'
0028 | 0003 | '^[\\w\\.\\-\\/]*$'
0029 | 0003 | u'^\\d+(\\.\\d+)*$'
0030 | 0003 | '^(.*)\\[(.*)\\](.*)$'
0031 | 0003 | '^([^<]+)[<]?(.*)[>]?$'
0032 | 0003 | '^\\w+(?:-\\w+)?(?:,\\w+(?:-\\w+)?)*$'
0033 | 0002 | '\\s*\\[.*$'
0034 | 0002 | '^(.+)<(.+)>(.*)$'
0035 | 0002 | '^(.*)\\s*<(.*)>\\s*$'
0036 | 0002 | '^.*?(v[\\d\\.]+).*?$'
0037 | 0002 | '^\\s*(>>>|...) (.*)$'
0038 | 0002 | '^(\\w+)\\s*=\\s*(.+)$'
0039 | 0002 | '(\\s*)(\\\\.+?)(\\s+)$'
0040 | 0002 | '^(.*?)([\\[\\*\\?].*)$'
0041 | 0002 | '"(\\\\\\\\|\\\\"|[^"])*"'
0042 | 0002 | '^(.*)\\.(.*)\\.(\\d+)\\.(\\d+)\\.(\\d+)$'
0043 | 0002 | '^(..[^\\(:]+)?[\\(:](\\d+)[\\):]:?\\s*(.*)'
0044 | 0002 | '(?:([\\w ]+) ([\\w.]+) .*\\[.* ([\\d.]+)\\])'
0045 | 0001 | '[().]'
0046 | 0001 | "'(.*)'"
0047 | 0001 | '\\).*$'
0048 | 0001 | "'(.*)'$"
0049 | 0001 | '.*[\\/]'
0050 | 0001 | '^-(.*)$'
0051 | 0001 | '(.*) [^ ]'
0052 | 0001 | '^(.*)"""$'
0053 | 0001 | '([$`\\\\])'
0054 | 0001 | '/\\.[^/]*$'
0055 | 0001 | '^([@+])?.*'
0056 | 0001 | '^\\(.*\\)$'
0057 | 0001 | '[ \\*]*(.+)'
0058 | 0001 | '^(\\:)(.*)$'
0059 | 0001 | '(.*?)[,(:].*'
0060 | 0001 | '([^:]*):(.*)'
0061 | 0001 | '[/\\\\?\\*:]'
0062 | 0001 | '^\\[(.*)\\]$'
0063 | 0001 | '^\\s*##(.*)$'
0064 | 0001 | '[\\(\\)\\s,]+'
0065 | 0001 | '[^.]*\\.\\..*'
0066 | 0001 | '^([#*]+)\\s.*'
0067 | 0001 | '^\\..*\\.swp$'
0068 | 0001 | '(,\\n|[^\\n-])+'
0069 | 0001 | '([^\\.])+\\..*$'
0070 | 0001 | '^(.*?) - (.*?)$'
0071 | 0001 | '^([^:]+):.(.*)$'
0072 | 0001 | '^(\\d+)\\s(.*)$'
0073 | 0001 | "'\\.\\./([^']*)'"
0074 | 0001 | '([^*]+)\\*(\\d+)'
0075 | 0001 | '^\\+\\+\\+ (.*)$'
0076 | 0001 | '\\[\\[(.*?)\\]\\]'
0077 | 0001 | '([\\d.]+)([^\\s]+)'
0078 | 0001 | '(\\$\\([^\\)]*\\))'
0079 | 0001 | '^:.*[MAD]\\s+(.+)$'
0080 | 0001 | '^\\* (.*): (.*)\n$'
0081 | 0001 | '(\\\\.|[^#])*(#.*)?'
0082 | 0001 | u'[_.,\\[\\]\\(\\):]'
0083 | 0001 | '^([^:]+):\\s+(.+)\\s*$'
0084 | 0001 | '(\\[\\[)([^$]+)(\\]\\])'
0085 | 0001 | '^.*<\\s*html(\\s*|>).*$'
0086 | 0001 | '("[^"]*?")|(\'[^\']*?\')'
0087 | 0001 | '^(\\d+\\.x-)?(\\d+)\\..*$'
0088 | 0001 | u'\\[\\[([^:]+):([^|\\]]+)'
0089 | 0001 | '^nic\\.\\d+\\.(.*)\\.\\d+$'
0090 | 0001 | '((?:"[^"]+"|[^,"]+)+)\\s*,?'
0091 | 0001 | '([^\\-\\.]*)-([\\d+.\\-]+)$'
0092 | 0001 | '[^\\(\\)]*\\((.*?)\\)[^\\(\\)]'
0093 | 0001 | '\\[\\[([^]|[:]*)\\|([^][]*)\\]\\]'
0094 | 0001 | '^\\#!\\s?([^\\s]+)(?:\\s([^\\s]+))?'
0095 | 0001 | '^(\\d+)\\W(\\w+)\\W(\\w+)[ \t]+(.*)$'
0096 | 0001 | '^\\t*INFO\\t----\\t----(.*)\\t[^\\t]*$'
0097 | 0001 | '[^#]*(\\S+)([ \\*]+)(\\S+)\\s*\\([^\\)]*'
0098 | 0001 | '^\\s*([^\\s]+)(?:(?:\\s*=\\s*)|\\s+)(.+)$'
0099 | 0001 | '(\\d+\\.\\d+\\.\\d+)[T\\.](\\d+(\\.\\d+)*)$'
0100 | 0001 | '[uU]?[rR]?(\\"\\"\\"|\\\'\\\'\\\'|\\"|\\\')'
0101 | 0001 | '^\\(\\[(\\S+)\\],\\[(\\S+)\\],\\[(\\S+)\\]\\)$'



cluster 1 stats:
nPatterns: 53.0
nProjects: 82
shortest: ^[a-zA-Z]*$
Features:

1: LIT|a literal character | 13.90566037735849
2: RNG|chars within a range | 4.452830188679245
3: CCC|custom character class | 1.849056603773585
4: CG|a capture group | 1.0943396226415094
5: KLE|zero-or-more repetition | 1.0188679245283019
6: ADD|one-or-more repetition | 0.7735849056603774
7: END|end-of-line | 0.5283018867924528
8: STR|start-of-line | 0.49056603773584906
9: NCCC|negated CCC | 0.2641509433962264
10: QST|zero-or-one repetition | 0.24528301886792453
11: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.16981132075471697
12: OR|logical or | 0.1509433962264151
13: ANY|any non-newline char | 0.1320754716981132
14: WRD|[a-zA-Z0-9\_] | 0.11320754716981132
15: LZY|as few reps as possible | 0.05660377358490566
16: NCG|group without capturing | 0.05660377358490566
17: NLKA|sequence doesn't follow  | 0.05660377358490566
18: BKR|match the $i^{th}$ CG | 0.018867924528301886
19: DEC|any of: 0123456789 | 0.018867924528301886
20: NWSP|any non-whitespace | 0.018867924528301886
21: OPT|options wrapper | 0.018867924528301886


0000 | 0014 | '<[a-zA-Z][-.a-zA-Z0-9]*/'
0001 | 0013 | '^[a-zA-Z_][a-zA-Z_0-9]*(\\.[a-zA-Z_][a-zA-Z_0-9]*)*$'
0002 | 0009 | '^([A-Z]+)([1-9][0-9]*)$'
0003 | 0009 | '^\\$([_a-zA-Z]\\w*|{[_a-zA-Z]\\w*})$'
0004 | 0008 | '^([a-zA-F0-9_-]*)[\\.]?.*$'
0005 | 0008 | '[ \t]*([A-Z0-9a-z_]+)[ \t]*=[ \t]*([-0-9]+)[, \t]*'
0006 | 0007 | '^[a-zA-Z_]\\w*'
0007 | 0007 | '&#?[A-Za-z0-9]+?;'
0008 | 0004 | u'[^A-Za-z0-9.]+'
0009 | 0004 | '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\\s|/(?!>))*'
0010 | 0004 | '\\$\\{?[a-zA-Z_][a-zA-Z0-9_]*(\\([^)]*\\))?(\\.[a-zA-Z0-9_]+(\\([^)]*\\))?)*\\}?'
0011 | 0003 | '([a-zA-Z0-9]*)$'
0012 | 0003 | '^[+/0-9A-Za-z]*=*$'
0013 | 0002 | '^[-_A-Za-z0-9]+$'
0014 | 0002 | '^([a-zA-Z0-9_]+):( |$)'
0015 | 0002 | '<([a-zA-Z][a-zA-Z0-9]*)/([^/]*)/'
0016 | 0002 | '@%\\(([a-zA-Z][a-zA-Z0-9_-]*)\\)s'
0017 | 0002 | 'SNIPPET::([A-Za-z0-9_\\-\\/\\.]+)'
0018 | 0001 | '^[a-zA-Z]*$'
0019 | 0001 | '^[^A-Za-z_]$'
0020 | 0001 | '^[a-z0-9-]+$'
0021 | 0001 | '([^a-zA-Z_0-9])'
0022 | 0001 | '[^a-zA-Z0-9_ -]'
0023 | 0001 | '^0x([0-9a-z]+)$'
0024 | 0001 | '^@[A-Z0-9\\_]+$'
0025 | 0001 | '^[a-z|A-Z]\\w*$'
0026 | 0001 | '[^a-zA-Z0-9_\\.]'
0027 | 0001 | "(^[A-Za-z\\' ]+$)"
0028 | 0001 | '^([A-Z]+)([0-9]+)$'
0029 | 0001 | '([^A-Za-z0-9\\._-])'
0030 | 0001 | u'[^A-Za-z0-9_\\.\\-]'
0031 | 0001 | '[$]([A-Z_][A-Z0-9_]*)'
0032 | 0001 | '^([a-zA-Z0-9_]*) *=.*$'
0033 | 0001 | '(?:[.~]|/[a-zA-Z_0-9]+)/'
0034 | 0001 | '([a-zA-Z_][a-zA-Z0-9_]*)'
0035 | 0001 | '\\$\\{([a-zA-Z0-9_-]+)\\}'
0036 | 0001 | '(?i)<[a-z\\.&_0-9\\@\\-]+>'
0037 | 0001 | '\\?[a-zA-Z_][a-zA-Z0-9_]*$'
0038 | 0001 | '^&[a-zA-Z0-9][a-zA-Z0-9_\\.]*$'
0039 | 0001 | '(?!__init__)[0-9a-zA-Z_]*(\\.py)?$'
0040 | 0001 | '^[A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9]$'
0041 | 0001 | '(?!__init__)[0-9a-zA-Z_]*(\\.pyc?)?$'
0042 | 0001 | '(^[^a-zA-Z\\._]+)|([^a-zA-Z\\._0-9]+)'
0043 | 0001 | '^([_A-Za-z][_A-Za-z0-9]*|\\.|\\.\\.)$'
0044 | 0001 | '^[0-9x]+ [0-9xA-F]+ .* [A-Z][A-Z] [0-9].*$'
0045 | 0001 | '([^a-zA-Z0-9]*)([a-zA-Z0-9]+)([^a-zA-Z0-9]*)'
0046 | 0001 | '(\n?)-  ([a-zA-Z_.-]+)-script.py\n-  \\2.exe\n'
0047 | 0001 | '[a-zA-Z_][a-zA-Z0-9_.-]*(:[a-zA-Z_][a-zA-Z0-9_.-])?'
0048 | 0001 | '^\\s*class\\s+([a-zA-Z_]\\w*)\\s*(\\([\\s\\w.,]*\\))?:\\s*$'
0049 | 0001 | '([# ]*?)([a-zA-Z0-9_]+)( +)([a-zA-Z0-9_\\?\\!<>\\+=\\.]+)(.*)'
0050 | 0001 | '^([A-Za-z0-9 .#(),_/-]+) +\\(([0-9A-F]+), ?([0-9A-F]+)\\) ([A-Z][A-Z]) ([0-9]+)$'
0051 | 0001 | '^([-_./a-zA-Z0-9]+)\\s+(\\d+)\\s+(\\S+?)((?:\\s+[-_./a-zA-Z0-9]+=[-_./a-zA-Z0-9]+)*)$'
0052 | 0001 | '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$'



cluster 2 stats:
nPatterns: 13.0
nProjects: 77
shortest: ([+-]\d{4})$
Features:

1: LIT|a literal character | 7.153846153846154
2: ADD|one-or-more repetition | 2.076923076923077
3: CG|a capture group | 2.0
4: CCC|custom character class | 1.9230769230769231
5: RNG|chars within a range | 1.5384615384615385
6: END|end-of-line | 0.8461538461538461
7: STR|start-of-line | 0.7692307692307693
8: KLE|zero-or-more repetition | 0.6153846153846154
9: ANY|any non-newline char | 0.5384615384615384
10: QST|zero-or-one repetition | 0.46153846153846156
11: NCCC|negated CCC | 0.38461538461538464
12: WRD|[a-zA-Z0-9\_] | 0.3076923076923077
13: LZY|as few reps as possible | 0.23076923076923078
14: OR|logical or | 0.23076923076923078
15: SNG|exactly n repetition | 0.23076923076923078
16: NCG|group without capturing | 0.15384615384615385
17: DEC|any of: 0123456789 | 0.07692307692307693
18: NLKA|sequence doesn't follow  | 0.07692307692307693
19: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.07692307692307693


0000 | 0060 | '[^]]+?\\] +([0-9.]+): (\\w+) <-(\\w+)'
0001 | 0003 | '^(.*)~([+-][0-9]{2})00$'
0002 | 0002 | '([+-]\\d{4})$'
0003 | 0002 | '^v([0-9]+|[0-9]+\\.[0-9]+)(/.*|$)'
0004 | 0002 | '^([0-9]{4})\\.([0-9]+)\\.([0-9]+)$'
0005 | 0001 | '^([0-9]+)-.+/.+$'
0006 | 0001 | '^(-?[0-9\\.]+)\\s*cm$'
0007 | 0001 | '\\$[0-9]+\\,?\\.?[0-9]*'
0008 | 0001 | '^([^ ]+) = ([0-9\\.]+)$'
0009 | 0001 | '^([\\w\\-]+/)?[\\w\\-\\.]+$'
0010 | 0001 | '^([0-9]+)\\.([0-9]+)\\.([0-9]+)(.*?)$'
0011 | 0001 | '^(.+?)[ \\._\\-]\\[?([0-9]+)x([0-9]+)[^\\/]*$'
0012 | 0001 | '^((?:[^-]+|-(?![0-9]))+)-([0-9][^-]*)(?:-(.*))?$'



cluster 3 stats:
nPatterns: 7.0
nProjects: 70
shortest: \s*(;)
Features:

1: KLE|zero-or-more repetition | 2.0
2: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.8571428571428572
3: LIT|a literal character | 1.1428571428571428
4: CG|a capture group | 0.42857142857142855
5: QST|zero-or-one repetition | 0.14285714285714285
6: STR|start-of-line | 0.14285714285714285
7: WRD|[a-zA-Z0-9\_] | 0.14285714285714285


0000 | 0054 | '\\s*,\\s*'
0001 | 0013 | '^(\\s*)(\\w*)'
0002 | 0002 | '\\s*\\{\\s*'
0003 | 0002 | u'\\s*,?\\s*'
0004 | 0002 | '\\s*\n\\s*\n\\s*'
0005 | 0001 | '\\s*(;)'
0006 | 0001 | '\\s*\\(\\s*\\('



cluster 4 stats:
nPatterns: 17.0
nProjects: 70
shortest: \(.*?\)
Features:

1: LIT|a literal character | 1.8823529411764706
2: KLE|zero-or-more repetition | 1.411764705882353
3: ANY|any non-newline char | 1.1176470588235294
4: CG|a capture group | 1.1176470588235294
5: LZY|as few reps as possible | 0.4117647058823529
6: END|end-of-line | 0.17647058823529413
7: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.17647058823529413
8: DEC|any of: 0123456789 | 0.11764705882352941
9: QST|zero-or-one repetition | 0.11764705882352941
10: STR|start-of-line | 0.11764705882352941
11: NWSP|any non-whitespace | 0.058823529411764705
12: OPT|options wrapper | 0.058823529411764705
13: WRD|[a-zA-Z0-9\_] | 0.058823529411764705


0000 | 0021 | '\\(.*?\\)'
0001 | 0017 | '\\s*#?\\s*$'
0002 | 0012 | '(?m)^\\.'
0003 | 0011 | '\\{\\{.*?\\}\\}'
0004 | 0008 | '(\\$\\((.*?)\\))'
0005 | 0006 | '@(\\w*)(.*)'
0006 | 0006 | '(.*?)(#)(.*)'
0007 | 0003 | '"(.*?)"'
0008 | 0002 | '(.*//.*?/)'
0009 | 0002 | '(!\\S*)(.*)'
0010 | 0002 | ':\\s*(#.*)?$'
0011 | 0001 | '^//(.*)'
0012 | 0001 | '{(.*)}$'
0013 | 0001 | '{(.*?)}'
0014 | 0001 | '\\) (.*)'
0015 | 0001 | '\\ //(.*)'
0016 | 0001 | '.*(\\d).*(\\d).*'



cluster 5 stats:
nPatterns: 16.0
nProjects: 70
shortest: \s*([a-f0-9]+):.*
Features:

1: LIT|a literal character | 16.0
2: CCC|custom character class | 3.125
3: CG|a capture group | 3.0625
4: RNG|chars within a range | 2.875
5: ADD|one-or-more repetition | 2.125
6: KLE|zero-or-more repetition | 1.9375
7: DEC|any of: 0123456789 | 0.8125
8: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5625
9: NCCC|negated CCC | 0.25
10: SNG|exactly n repetition | 0.1875
11: ANY|any non-newline char | 0.125
12: NCG|group without capturing | 0.125
13: QST|zero-or-one repetition | 0.125
14: STR|start-of-line | 0.125
15: WRD|[a-zA-Z0-9\_] | 0.0625


0000 | 0057 | '<([^>]*)>: \\[0x([0-9a-f]+)-0x([0-9a-f]+)\\]'
0001 | 0003 | '^(\\w+)=([a-f0-9]+)'
0002 | 0003 | '^@@ -([0-9]*),([0-9]*) \\+([0-9]*),([0-9]*) @@'
0003 | 0001 | '\\s*([a-f0-9]+):.*'
0004 | 0001 | '([a-z ]+)(\\([0-9]+\\))?'
0005 | 0001 | '(fasta_[a-z0-9]+\\.fasta)'
0006 | 0001 | '[ _\\.-]+cd[ _\\.-]*([0-9a-d]+)'
0007 | 0001 | '\\[([\\.0-9a-f:]+)\\](?::(\\d+))?'
0008 | 0001 | '--[0-9]+-- ([^(:]*) \\((0x[0-9a-f]+)\\)'
0009 | 0001 | '(\\d{4})-(\\d{2})-(\\d{2})[\\s\t]*([0-9:, -]+)'
0010 | 0001 | '([a-z]*) ([\\d-]+) ([a-z]*)[\\s\t]*([0-9:, -]+)'
0011 | 0001 | '\\s+src set ".*" \\(([0-9.]+) docs, \\d+ segs\\)'
0012 | 0001 | '([a-z]*) ([\\d-]+) - ([a-z]*) ([\\d-]+)[\\s\t]*([0-9:, -]+)'
0013 | 0001 | '==[0-9]+==\\s*[#0-9]+\\s*([0-9A-Fa-fx]+):(?:[^ ]* )*([^ :\n]+)'
0014 | 0001 | '([a-z]*) ([\\d-]+) ([a-z]*) - ([a-z]*) ([\\d-]+) ([a-z]*) [\\s\t]*([0-9:, -]+)'
0015 | 0001 | '([a-z]*) ([\\d-]+) ([a-z]*) - ([a-z]*) ([\\d-]+) ([a-z]*) / (\\d+)[\\s\t]*([0-9:, -]+)'



cluster 6 stats:
nPatterns: 28.0
nProjects: 64
shortest: ^(\s+)
Features:

1: ADD|one-or-more repetition | 2.1785714285714284
2: CG|a capture group | 1.75
3: LIT|a literal character | 1.6071428571428572
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0714285714285714
5: NWSP|any non-whitespace | 1.0357142857142858
6: KLE|zero-or-more repetition | 0.5714285714285714
7: DEC|any of: 0123456789 | 0.4642857142857143
8: END|end-of-line | 0.35714285714285715
9: STR|start-of-line | 0.2857142857142857
10: ANY|any non-newline char | 0.17857142857142858
11: OR|logical or | 0.14285714285714285
12: OPT|options wrapper | 0.03571428571428571


0000 | 0017 | '(\\(|\\)|\\s+)'
0001 | 0009 | '^(\\s+)'
0002 | 0005 | '\\s+(\\d+),$'
0003 | 0005 | '(\\S+)\\s+(\\S+)'
0004 | 0003 | '(\\S+);.*'
0005 | 0003 | u'(\\.|\\s)'
0006 | 0003 | '(\\S+): (\\S+)'
0007 | 0003 | '^(\\s*)()(\\S+)(.*$)'
0008 | 0003 | '(\\d+),\\s*(\\d+),\\s*(\\d+),\\s*(\\d+),\\s*(\\d+)'
0009 | 0002 | '(\\s|,)+'
0010 | 0002 | '(?s)>\\s+'
0011 | 0002 | '\\|(\\S+)\\|'
0012 | 0002 | '->\\s*(\\S+)$'
0013 | 0001 | '^(\\?+)'
0014 | 0001 | '(\\s|_)+'
0015 | 0001 | '>(\\d+)$'
0016 | 0001 | '^(\\s+)\\S+'
0017 | 0001 | u'tt(\\d+)/$'
0018 | 0001 | '(\\S+):\\s*(.*)'
0019 | 0001 | 'UNSEEN\\s+(\\d+)'
0020 | 0001 | '^(\\S+ +\\S+)\\s*$'
0021 | 0001 | '^\\S+ (\\S+)@(\\S+)$'
0022 | 0001 | '##\\s*(\\S+)\\s+(\\S*)'
0023 | 0001 | '^ (\\S+) (\\d+)/(\\d+)'
0024 | 0001 | '\\s*(\\S+)\\s+/(.*)/\\s*$'
0025 | 0001 | '(\\S+)\\s+(\\d)\\s+\\d+\\s+\\S+$'
0026 | 0001 | '^(\\S+)\\t(\\S+)\\t(\\S+)\\t(.+)\\n$'
0027 | 0001 | '\\S+\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)%'



cluster 7 stats:
nPatterns: 19.0
nProjects: 56
shortest: ([\{\}])
Features:

1: LIT|a literal character | 8.052631578947368
2: CG|a capture group | 1.2105263157894737
3: CCC|custom character class | 0.7894736842105263
4: ADD|one-or-more repetition | 0.5789473684210527
5: NCCC|negated CCC | 0.5263157894736842
6: KLE|zero-or-more repetition | 0.47368421052631576
7: OR|logical or | 0.3684210526315789
8: SNG|exactly n repetition | 0.3157894736842105
9: STR|start-of-line | 0.2631578947368421
10: ANY|any non-newline char | 0.21052631578947367
11: RNG|chars within a range | 0.15789473684210525
12: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.15789473684210525
13: DEC|any of: 0123456789 | 0.10526315789473684
14: END|end-of-line | 0.10526315789473684
15: QST|zero-or-one repetition | 0.10526315789473684
16: DBB|$n\le x \le m$ repetition | 0.05263157894736842
17: LWB|at least n repetition | 0.05263157894736842
18: LZY|as few reps as possible | 0.05263157894736842
19: NCG|group without capturing | 0.05263157894736842
20: NLKA|sequence doesn't follow  | 0.05263157894736842
21: WRD|[a-zA-Z0-9\_] | 0.05263157894736842


0000 | 0019 | '\\$(\\w+|\\{[^}]*\\})'
0001 | 0007 | '^[ ]{4,7}((\\d+\\.)|[*+-])[ ].*'
0002 | 0006 | '[\\\'|"|#|\\\\|\\[|\\]|\\{|\\}|\\(|\\)]'
0003 | 0005 | '([^*{}\\s]@|[^*{}@\\s]|\\*(?!/))+'
0004 | 0004 | '(^|\\})(([^\\{\\:])+\\:)+([^\\{]*\\{)'
0005 | 0002 | '(.*?)([\\\\\\{\\}\\[\\]])(.*)'
0006 | 0002 | '(\\\\|\\*|\\+|\\?|\\||\\{|\\}|\\[|\\]|\\(|\\)|\\^|\\$|\\.|\\#|\\ )'
0007 | 0001 | '([\\{\\}])'
0008 | 0001 | '{([^}^{]*)}'
0009 | 0001 | '([$]{[^}]*})'
0010 | 0001 | '#\\{([^}]*)\\}'
0011 | 0001 | '[RL]\\{(.+)\\}'
0012 | 0001 | '([^.()]+\\.){5}'
0013 | 0001 | '[?\\&|!{}+~^()":*-]+'
0014 | 0001 | '^([+\\-])?\\$([^\\$\\{\\}]+)$'
0015 | 0001 | '^(In \\[\\d+\\]: |\\s*\\.{3,}: ?)'
0016 | 0001 | '([\\|\\{\\}\\\\\\.\\+\\[\\]\\(\\)])'
0017 | 0001 | '^(?:[A-Z]{1}\\.{1}|[A-Z]{1}\\.{1}[A-Z]{1})+$'
0018 | 0001 | '([\\$\\^\\*\\+\\.\\?\\{\\}\\[\\]\\(\\)\\|\\\\])'



cluster 8 stats:
nPatterns: 18.0
nProjects: 52
shortest: \d+ (\d+):
Features:

1: LIT|a literal character | 3.5555555555555554
2: DEC|any of: 0123456789 | 3.0
3: ADD|one-or-more repetition | 2.2222222222222223
4: CG|a capture group | 2.2222222222222223
5: ANY|any non-newline char | 0.4444444444444444
6: QST|zero-or-one repetition | 0.4444444444444444
7: KLE|zero-or-more repetition | 0.3333333333333333
8: LZY|as few reps as possible | 0.1111111111111111
9: NCG|group without capturing | 0.1111111111111111
10: WRD|[a-zA-Z0-9\_] | 0.1111111111111111
11: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.1111111111111111
12: ENDZ|absolute end of string | 0.05555555555555555
13: END|end-of-line | 0.05555555555555555
14: NWSP|any non-whitespace | 0.05555555555555555
15: STR|start-of-line | 0.05555555555555555


0000 | 0016 | '\\S+ (\\d+)\\.(\\d+)\\.?(\\d+)?'
0001 | 0012 | '(\\d+\\.\\d+\\.\\d+)'
0002 | 0004 | '(\\d+)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)'
0003 | 0003 | '\\d+ (\\d+):'
0004 | 0003 | '(\\d+)\\.(\\d+)(?:\\.(\\d+))?'
0005 | 0003 | '^(\\d+)\\.(\\d+)(?:\\.(\\d+))?'
0006 | 0002 | '\\d+(\\.\\d*)?'
0007 | 0002 | '<<<(-?\\d+?)>>>'
0008 | 0002 | '(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)'
0009 | 0002 | 'fail:(\\d+).*?fail:(\\d+).*fail:(\\d+)'
0010 | 0001 | ':.*\\.(\\d+)'
0011 | 0001 | 'id_.*=(\\d+)'
0012 | 0001 | '(-?\\d+):(-?\\d+)'
0013 | 0001 | '(.+):(\\d+): (.+)$'
0014 | 0001 | '(\\d+):(\\d\\d)\\Z'
0015 | 0001 | ' \\d+.\\d+ tb\\(r\\)'
0016 | 0001 | '(\\d+)\\s+\\w+\\s+(\\w+).*'
0017 | 0001 | '(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)'



cluster 9 stats:
nPatterns: 3.0
nProjects: 44
shortest: \W+
Features:

1: ADD|one-or-more repetition | 1.0
2: NWRD|non-word chars | 1.0
3: CG|a capture group | 0.3333333333333333
4: STR|start-of-line | 0.3333333333333333


0000 | 0026 | '\\W+'
0001 | 0009 | '(\\W+)'
0002 | 0006 | '^\\W+'



cluster 10 stats:
nPatterns: 26.0
nProjects: 44
shortest: ^cert=(?P<nickname>[0-9a-zA-Z_ ]+)
Features:

1: LIT|a literal character | 240.80769230769232
2: CCC|custom character class | 4.5
3: ADD|one-or-more repetition | 3.730769230769231
4: QST|zero-or-one repetition | 3.730769230769231
5: RNG|chars within a range | 3.576923076923077
6: PNG|named capture group | 3.3461538461538463
7: KLE|zero-or-more repetition | 3.1538461538461537
8: NCG|group without capturing | 2.5384615384615383
9: CG|a capture group | 2.3461538461538463
10: ANY|any non-newline char | 2.1923076923076925
11: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.8076923076923077
12: DEC|any of: 0123456789 | 1.2692307692307692
13: OR|logical or | 1.2307692307692308
14: STR|start-of-line | 0.5769230769230769
15: LZY|as few reps as possible | 0.5
16: END|end-of-line | 0.4230769230769231
17: NCCC|negated CCC | 0.34615384615384615
18: SNG|exactly n repetition | 0.23076923076923078
19: WRD|[a-zA-Z0-9\_] | 0.19230769230769232
20: DBB|$n\le x \le m$ repetition | 0.11538461538461539
21: LKB|matching sequence precedes | 0.11538461538461539
22: NLKB|sequence doesn't precede | 0.11538461538461539
23: ENDZ|absolute end of string | 0.07692307692307693
24: LKA|matching sequence follows | 0.07692307692307693
25: LWB|at least n repetition | 0.038461538461538464
26: NLKA|sequence doesn't follow  | 0.038461538461538464
27: OPT|options wrapper | 0.038461538461538464


0000 | 0007 | '(?P<replace>(?P<type><(?:(?:!?@?)|\\|)?)(?P<command_string>[-a-zA-Z0-9_.]+)?\\((?P<is_array>\\s*\\[?)(?P<content>.*?)(\\]?)\\))'
0001 | 0006 | '\n  =\\?                   # literal =?\n  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset\n  \\?                    # literal ?\n  (?P<encoding>[qb])    # either a "q" or a "b", case insensitive\n  \\?                    # literal ?\n  (?P<encoded>.*?)      # non-greedy up to the next ?= is the encoded string\n  \\?=                   # literal ?=\n  (?=[ \\t]|$)           # whitespace or the end of the string\n  '
0002 | 0005 | '^(?P<version>(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<subminor>\\d+))((rc(?P<release_candidate>\\d+))|dev)?-CAPI-(?P<capi_version>\\d+\\.\\d+\\.\\d+)$'
0003 | 0003 | '%(?:(?P<cn>[0-9]+)\\$)?(?P<width>[0-9]+)?(?:.(?P<pres>[0-9]+))?(?P<size>[hL]|(?:ll?))?(?P<type>[dciouxXefgpCSsn])'
0004 | 0003 | '\n    (\n        (?:".*?")|              # double quotes\n        (?:\'.*?\')|              # single quotes\n        (?:[^\'",\\s=][^,=]*?)       # unquoted\n    )\n    (?:\n    (?:\\s*,\\s*)|(?:\\s*$)            # comma\n    )\n'
0005 | 0003 | '^(?:\\s*)([0-9]+):(?:\\s*)(?P<rx_bytes>\\d+)(?:\\s*)(?P<rx_packets>\\w+)(?:\\s*)(?P<rx_errors>\\d+)(?:\\s*)(?P<rx_drop>\\d+)(?:\\s*)(?P<rx_fifo>\\d+)(?:\\s*)(?P<rx_frame>\\d+)(?:\\s*)(?P<rx_compressed>\\d+)(?:\\s*)(?P<rx_multicast>\\d+)(?:\\s*)(?P<tx_bytes>\\d+)(?:\\s*)(?P<tx_packets>\\w+)(?:\\s*)(?P<tx_errors>\\d+)(?:\\s*)(?P<tx_drop>\\d+)(?:\\s*)(?P<tx_fifo>\\d+)(?:\\s*)(?P<tx_frame>\\d+)(?:\\s*)(?P<tx_compressed>\\d+)(?:\\s*)(?P<tx_multicast>\\d+)(?:.*)$'
0006 | 0003 | '        # A numeric string consists of:\n#    \\s*\n    (?P<sign>[-+])?              # an optional sign, followed by either...\n    (\n        (?=\\d|\\.\\d)              # ...a number (with at least one digit)\n        (?P<int>\\d*)             # having a (possibly empty) integer part\n        (\\.(?P<frac>\\d*))?       # followed by an optional fractional part\n        (E(?P<exp>[-+]?\\d+))?    # followed by an optional exponent, or...\n    |\n        Inf(inity)?              # ...an infinity, or...\n    |\n        (?P<signal>s)?           # ...an (optionally signaling)\n        NaN                      # NaN\n        (?P<diag>\\d*)            # with (possibly empty) diagnostic info.\n    )\n#    \\s*\n    \\Z\n'
0007 | 0002 | '(WARNING|ERROR|INFO) \\(l.(?P<line>[0-9]+), c.(?P<column>[0-9]+)\\): (?P<rest>.*)'
0008 | 0002 | '^((?P<retval>[^=]+?)\\s*=|class)?\\s*(?P<head>[\\w\\.]+\\s?\\(.*?\\))\\s*(?P<sep>[:<>=-]*)\\s*(?P<tail>.*)$'
0009 | 0002 | '(?P<year>[0-9]{4})(-(?P<month>[0-9]{1,2})(-(?P<day>[0-9]{1,2})((?P<separator>.)(?P<hour>[0-9]{2}):(?P<minute>[0-9]{2})(:(?P<second>[0-9]{2})(\\.(?P<fraction>[0-9]+))?)?(?P<timezone>Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?'
0010 | 0002 | '<\\?xml\n            (   # strict ordering is reqd but we\'ll be liberal here\n                \\s+version=[\'"](?P<ver>.*?)[\'"]\n            |   \\s+encoding=[\'"](?P<enc>.*?)[\'"]\n            )+\n            .*? # other possible junk\n            \\s*\\?>\n        '
0011 | 0002 | "\n        ^\n        \\s*\n        (?P<operator>(~=|==|!=|<=|>=|<|>|===))\n        (?P<version>\n            (?:\n                # The identity operators allow for an escape hatch that will\n                # do an exact string match of the version you wish to install.\n                # This will not be parsed by PEP 440 and we cannot determine\n                # any semantic meaning from it. This operator is discouraged\n                # but included entirely as an escape hatch.\n                (?<====)  # Only match for the identity operator\n                \\s*\n                [^\\s]*    # We just match everything, except for whitespace\n                          # since we are only testing for strict identity.\n            )\n            |\n            (?:\n                # The (non)equality operators allow for wild card and local\n                # versions to be specified so we have to define these two\n                # operators separately to enable that.\n                (?<===|!=)            # Only match for equals and not equals\n\n                \\s*\n                v?\n                (?:[0-9]+!)?          # epoch\n                [0-9]+(?:\\.[0-9]+)*   # release\n                (?:                   # pre release\n                    [-_\\.]?\n                    (a|b|c|rc|alpha|beta|pre|preview)\n                    [-_\\.]?\n                    [0-9]*\n                )?\n                (?:                   # post release\n                    (?:-[0-9]+)|(?:[-_\\.]?(post|rev|r)[-_\\.]?[0-9]*)\n                )?\n\n                # You cannot use a wild card and a dev or local version\n                # together so group them with a | and make them optional.\n                (?:\n                    (?:[-_\\.]?dev[-_\\.]?[0-9]*)?         # dev release\n                    (?:\\+[a-z0-9]+(?:[-_\\.][a-z0-9]+)*)? # local\n                    |\n                    \\.\\*  # Wild card syntax of .*\n                )?\n            )\n            |\n            (?:\n                # The compatible operator requires at least two digits in the\n                # release segment.\n                (?<=~=)               # Only match for the compatible operator\n\n                \\s*\n                v?\n                (?:[0-9]+!)?          # epoch\n                [0-9]+(?:\\.[0-9]+)+   # release  (We have a + instead of a *)\n                (?:                   # pre release\n                    [-_\\.]?\n                    (a|b|c|rc|alpha|beta|pre|preview)\n                    [-_\\.]?\n                    [0-9]*\n                )?\n                (?:                                   # post release\n                    (?:-[0-9]+)|(?:[-_\\.]?(post|rev|r)[-_\\.]?[0-9]*)\n                )?\n                (?:[-_\\.]?dev[-_\\.]?[0-9]*)?          # dev release\n            )\n            |\n            (?:\n                # All other operators only allow a sub set of what the\n                # (non)equality operators do. Specifically they do not allow\n                # local versions to be specified nor do they allow the prefix\n                # matching wild cards.\n                (?<!==|!=|~=)         # We have special cases for these\n                                      # operators so we want to make sure they\n                                      # don't match here.\n\n                \\s*\n                v?\n                (?:[0-9]+!)?          # epoch\n                [0-9]+(?:\\.[0-9]+)*   # release\n                (?:                   # pre release\n                    [-_\\.]?\n                    (a|b|c|rc|alpha|beta|pre|preview)\n                    [-_\\.]?\n                    [0-9]*\n                )?\n                (?:                                   # post release\n                    (?:-[0-9]+)|(?:[-_\\.]?(post|rev|r)[-_\\.]?[0-9]*)\n                )?\n                (?:[-_\\.]?dev[-_\\.]?[0-9]*)?          # dev release\n            )\n        )\n        \\s*\n        $\n        "
0012 | 0001 | '^cert=(?P<nickname>[0-9a-zA-Z_ ]+)'
0013 | 0001 | '(?P<name>[a-zA-Z0-9_*]+)(?P<default>=.*?)?, '
0014 | 0001 | '^(0x[0-9a-fA-F]+)(?:,(ramdisk|ipl|entry|rpm))?$'
0015 | 0001 | '^(.*[^a-z0-9\\n])?(sudo|su +-c|system/bin/su) +.*'
0016 | 0001 | '^http://node-todobin\\.herokuapp\\.com/list/[a-z0-9]+$'
0017 | 0001 | '(?i)(?:https?://)?(?:www\\.)?dailymotion\\.[a-z]{2,3}/video/([^_/]+)_([^/]+)'
0018 | 0001 | '^(?P<username>[A-Za-z0-9_\\.-]+@)?(?P<hostname>[A-Za-z0-9_\\.-]+):(?P<path>.*)'
0019 | 0001 | '\\A(?P<head>.*?)(?P<escape>\\\\*)(?P<symbol>\\$\\{(?P<name>[A-z_]\\w*)\\})(?P<tail>.*)\\Z'
0020 | 0001 | '<key>system.privilege.taskport</key>\\s*\n\\s*<dict>\n\\s*<key>allow-root</key>\n\\s*(<[^>]+>)'
0021 | 0001 | '^v(?P<ver>\\d+(?:\\.\\d+)+(?:(?:[abc]|rc)\\d+(?:\\.\\d+)*)?)-(?P<commits>\\d+)-g(?P<sha>[\\da-f]+)$'
0022 | 0001 | '^\\s+inet addr:\\s*(?P<ipaddr>[0-9\\.]+)(\\s+Bcast:(?P<bcast>[0-9\\.]+))?\\s+Mask:(?P<mask>[0-9\\.]+)'
0023 | 0001 | '^(?P<sign>[+-])?P(?P<years>[0-9]+([,.][0-9]+)?Y)?(?P<months>[0-9]+([,.][0-9]+)?M)?(?P<weeks>[0-9]+([,.][0-9]+)?W)?(?P<days>[0-9]+([,.][0-9]+)?D)?((?P<separator>T)(?P<hours>[0-9]+([,.][0-9]+)?H)?(?P<minutes>[0-9]+([,.][0-9]+)?M)?(?P<seconds>[0-9]+([,.][0-9]+)?S)?)?$'
0024 | 0001 | '\n            (?:^[ \\t]+)?               # eat spaces, tabs (opt.)\n            (<\n             (?:!--[ ])?               # comment start + space (opt.)\n             /?TMPL_[A-Z]+             # closing slash / (opt.) + statement\n             [ a-zA-Z0-9""/.=:_\\\\-]*   # this spans also comments ending (--)\n             >)\n            [\n]?                      # eat trailing newline (opt.)\n        '
0025 | 0001 | "\n        ^(?!\\.)                            # name may not begin with a dot\n        (\n          [-a-z0-9!\\#$%&'*+/=?^_`{|}~]     # all legal characters except dot\n          |\n          (?<!\\.)\\.                        # single dots only\n        )+\n        (?<!\\.)                            # name may not end with a dot\n        @\n        (\n          localhost\n          |\n          (\n            [a-z0-9]                         # [sub]domain begins with alphanumeric\n            (\n              [-\\w]*                         # alphanumeric, underscore, dot, hyphen\n              [a-z0-9]                       # ending alphanumeric\n            )?\n          \\.                               # ending dot\n          )+\n          [a-z]{2,}                        # TLD alpha-only\n       )$\n    "



cluster 11 stats:
nPatterns: 17.0
nProjects: 38
shortest: [\n\r]
Features:

1: LIT|a literal character | 3.823529411764706
2: CCC|custom character class | 0.9411764705882353
3: ADD|one-or-more repetition | 0.5294117647058824
4: CG|a capture group | 0.5294117647058824
5: KLE|zero-or-more repetition | 0.5294117647058824
6: NCCC|negated CCC | 0.5294117647058824
7: END|end-of-line | 0.11764705882352941
8: QST|zero-or-one repetition | 0.058823529411764705
9: RNG|chars within a range | 0.058823529411764705
10: STR|start-of-line | 0.058823529411764705
11: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.058823529411764705


0000 | 0007 | '([\\t ]+)'
0001 | 0006 | '[\\r\\n]+'
0002 | 0004 | '[\n\r]'
0003 | 0004 | '([\\\\()\\r\\n])'
0004 | 0003 | '[\n ]+$'
0005 | 0003 | '([\\s\\\\])'
0006 | 0003 | u'([^\\t -~])'
0007 | 0002 | '\\n\\r?[\\t ]*$'
0008 | 0001 | '[\t ]+'
0009 | 0001 | '([\\t\\n])'
0010 | 0001 | '[ \\t]+\\n'
0011 | 0001 | '[ \r\n\t]+'
0012 | 0001 | '[\n\r\t ]+'
0013 | 0001 | '^[ \\t\\n\\r]'
0014 | 0001 | '[ \\t]*\\n([^\\r\\n])'
0015 | 0001 | '[\\r\\n\\t ]+[\\r\\n]+'
0016 | 0001 | '[^\\t]*\\t([^\\t]*)\\t([^\\t]*)\\t[^\\t]*\\t[^\\t]*\\t([^\\t]*)\\t[^\\t]*\\n'



cluster 12 stats:
nPatterns: 21.0
nProjects: 38
shortest: [^+0-9]
Features:

1: LIT|a literal character | 4.714285714285714
2: RNG|chars within a range | 1.380952380952381
3: CCC|custom character class | 1.2857142857142858
4: CG|a capture group | 0.9047619047619048
5: ADD|one-or-more repetition | 0.8571428571428571
6: KLE|zero-or-more repetition | 0.3333333333333333
7: ANY|any non-newline char | 0.23809523809523808
8: DBB|$n\le x \le m$ repetition | 0.19047619047619047
9: NCCC|negated CCC | 0.14285714285714285
10: SNG|exactly n repetition | 0.14285714285714285
11: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.14285714285714285
12: LWB|at least n repetition | 0.09523809523809523
13: OR|logical or | 0.09523809523809523
14: END|end-of-line | 0.047619047619047616
15: STR|start-of-line | 0.047619047619047616


0000 | 0013 | '([0-9]+)'
0001 | 0006 | '[0-9]+,[0-9]+'
0002 | 0002 | '%([0-9]+)'
0003 | 0002 | '[^0-9:\\.]'
0004 | 0002 | '\\*\\*([0-9]+)'
0005 | 0002 | '^(\\+[3-9]{1,}|\\+{3,}|\\+[1-9][0-9]+)$'
0006 | 0001 | '[^+0-9]'
0007 | 0001 | '[^0-9.]'
0008 | 0001 | "([0-9]+)'"
0009 | 0001 | ' - [0-9]+'
0010 | 0001 | '[0-9]+\\.'
0011 | 0001 | '(.*): [0-9]'
0012 | 0001 | '([0-9]+)\\s+min'
0013 | 0001 | 'N=10: ([.0-9]+)'
0014 | 0001 | '(0|[1-9][0-9]*):'
0015 | 0001 | '([1-9][0-9]*)*(.*)'
0016 | 0001 | '\\[ip:([0-9_]*)\\]'
0017 | 0001 | '(.+):([0-9]+)[:]{0,1}.*'
0018 | 0001 | '([0-9]+\\s+\\-\\s+)(.+)'
0019 | 0001 | '([A-Z]{2}[0-9]{2,3}-[0-9]{2})'
0020 | 0001 | '(([0-9]{1,3}\\.){3}[0-9]{1,3})'



cluster 13 stats:
nPatterns: 5.0
nProjects: 35
shortest: __version__\s*=\s*(.+?\n)
Features:

1: LIT|a literal character | 18.4
2: KLE|zero-or-more repetition | 1.8
3: CCC|custom character class | 1.4
4: ANY|any non-newline char | 1.2
5: ADD|one-or-more repetition | 0.8
6: LZY|as few reps as possible | 0.8
7: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.8
8: CG|a capture group | 0.6
9: PNG|named capture group | 0.4
10: STR|start-of-line | 0.4
11: DEC|any of: 0123456789 | 0.2
12: NCCC|negated CCC | 0.2


0000 | 0028 | '^<\\?.*encoding=[\'"](.*?)[\'"].*\\?>'
0001 | 0004 | '^<\\?xml.*?encoding=["\\\']*(.+?)["\\\'>]'
0002 | 0001 | '__version__\\s*=\\s*(.+?\\n)'
0003 | 0001 | '<div class="context" id="(?P<id>[^"]+)">'
0004 | 0001 | 'version\\s*=\\s*[\'"](?P<version>[\\d\\.]+)[\'"]'



cluster 14 stats:
nPatterns: 14.0
nProjects: 33
shortest: $(\w+)
Features:

1: LIT|a literal character | 2.0
2: CG|a capture group | 1.4285714285714286
3: ADD|one-or-more repetition | 1.2142857142857142
4: WRD|[a-zA-Z0-9\_] | 1.1428571428571428
5: ANY|any non-newline char | 0.5
6: END|end-of-line | 0.21428571428571427
7: KLE|zero-or-more repetition | 0.21428571428571427
8: LZY|as few reps as possible | 0.07142857142857142


0000 | 0008 | '$(\\w+)'
0001 | 0005 | '(.+)\\!$'
0002 | 0005 | '(\\w+)(.*)'
0003 | 0004 | '\\$(\\w+)'
0004 | 0003 | '\\${(\\w+)}'
0005 | 0003 | '(\\w+)-(\\w+)\\ : (.*)'
0006 | 0001 | '(\\w+;)'
0007 | 0001 | ':(\\w+)'
0008 | 0001 | '(\\w+).py$'
0009 | 0001 | '\\{(\\w+)\\}'
0010 | 0001 | '(\\w+://)(.+)'
0011 | 0001 | '.*/(\\w+).kcm'
0012 | 0001 | '\\$\\((\\w+?)\\)'
0013 | 0001 | '(\\w+) (\\w)\\. (\\w+)'



cluster 15 stats:
nPatterns: 6.0
nProjects: 30
shortest: ^\d+$
Features:

1: DEC|any of: 0123456789 | 1.5
2: ADD|one-or-more repetition | 1.3333333333333333
3: LIT|a literal character | 1.0
4: END|end-of-line | 0.6666666666666666
5: STR|start-of-line | 0.6666666666666666
6: QST|zero-or-one repetition | 0.16666666666666666


0000 | 0015 | u'^\\d+$'
0001 | 0009 | ':\\d+$'
0002 | 0003 | '^-?\\d'
0003 | 0001 | 'p\\d+$'
0004 | 0001 | '^\\d+-\\d+'
0005 | 0001 | '^\\d+\\-\\d+\\-\\d+$'



cluster 16 stats:
nPatterns: 7.0
nProjects: 30
shortest: ^[0-9]{2}$
Features:

1: LIT|a literal character | 6.428571428571429
2: RNG|chars within a range | 2.5714285714285716
3: CCC|custom character class | 1.8571428571428572
4: SNG|exactly n repetition | 1.5714285714285714
5: END|end-of-line | 0.7142857142857143
6: STR|start-of-line | 0.5714285714285714
7: NCCC|negated CCC | 0.2857142857142857
8: CG|a capture group | 0.14285714285714285
9: DBB|$n\le x \le m$ repetition | 0.14285714285714285


0000 | 0022 | '^[ -~]{0,200}[!-~]$'
0001 | 0007 | 'md5=[0-9a-f]{32}$'
0002 | 0002 | '^[0-9]{2}$'
0003 | 0001 | '[0-9a-f]{32}'
0004 | 0001 | '^[0-9a-f]{32}$'
0005 | 0001 | u'[^0-9]([0-9]{4})[^0-9]'
0006 | 0001 | '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$'



cluster 17 stats:
nPatterns: 7.0
nProjects: 28
shortest: /\*
Features:

1: LIT|a literal character | 1.5714285714285714
2: ANY|any non-newline char | 1.0
3: KLE|zero-or-more repetition | 1.0
4: STR|start-of-line | 0.42857142857142855


0000 | 0019 | '/\\*'
0001 | 0005 | '/\\*\\*'
0002 | 0004 | '.*@.*\\..*'
0003 | 0002 | '^.*\\/'
0004 | 0001 | '\\/.*'
0005 | 0001 | '^.*\\('
0006 | 0001 | '^\\..*'



cluster 18 stats:
nPatterns: 3.0
nProjects: 25
shortest: template=
Features:

1: LIT|a literal character | 13.0


0000 | 0024 | 'release_cmd_to_pool'
0001 | 0001 | 'template='
0002 | 0001 | 'smtp_relay='



cluster 19 stats:
nPatterns: 6.0
nProjects: 25
shortest: \s*def\s+(p_[a-zA-Z_0-9]*)\(
Features:

1: LIT|a literal character | 21.333333333333332
2: RNG|chars within a range | 4.166666666666667
3: CCC|custom character class | 3.5
4: ADD|one-or-more repetition | 1.8333333333333333
5: CG|a capture group | 1.5
6: KLE|zero-or-more repetition | 1.5
7: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.8333333333333334
8: STR|start-of-line | 0.3333333333333333
9: OR|logical or | 0.16666666666666666


0000 | 0010 | '/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\n'
0001 | 0010 | '^[\t ]*#[\t ]*define[\t ]+([a-zA-Z0-9_]+)[\t ]+'
0002 | 0010 | '^[ \\t]*(def|class)[ \\t]+([a-zA-Z_][a-zA-Z0-9_]*)[ \\t]*[:\\(]'
0003 | 0009 | '\\s*def\\s+(p_[a-zA-Z_0-9]*)\\('
0004 | 0002 | '\\s*#define\\s+([a-zA-Z][a-zA-Z_0-9]*)\\s+([a-zA-Z_0-9]+)'
0005 | 0001 | '#define Py_([a-z_]+) ([0-9]+)'



cluster 20 stats:
nPatterns: 11.0
nProjects: 25
shortest: [a-zA-Z]
Features:

1: LIT|a literal character | 7.636363636363637
2: RNG|chars within a range | 2.909090909090909
3: CCC|custom character class | 2.0
4: CG|a capture group | 1.2727272727272727
5: ADD|one-or-more repetition | 0.9090909090909091
6: KLE|zero-or-more repetition | 0.7272727272727273
7: QST|zero-or-one repetition | 0.45454545454545453
8: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.36363636363636365
9: DEC|any of: 0123456789 | 0.18181818181818182
10: NCCC|negated CCC | 0.18181818181818182
11: OR|logical or | 0.18181818181818182
12: STR|start-of-line | 0.18181818181818182
13: WNW|word/non-word boundary | 0.18181818181818182
14: ANY|any non-newline char | 0.09090909090909091


0000 | 0007 | '[a-zA-Z]'
0001 | 0007 | '[\\\\]([a-zA-Z]+[*]?) ?({|\\s*\\n?)'
0002 | 0003 | '([A-Z][a-z]+)'
0003 | 0002 | '[A-Za-z]'
0004 | 0002 | '^\\s*@([a-zA-Z]+)'
0005 | 0001 | '^[a-zA-Z]+='
0006 | 0001 | '[^a-z]([a-z]+)[^a-z]'
0007 | 0001 | '\\b[A-Z](\\.[A-Za-z])+\\b'
0008 | 0001 | '([a-zA-Z-]+)\\s*\\((.*)\\)'
0009 | 0001 | '([\\-]?\\d*)\\s*([A-Za-z]+([\\-@]\\d*[A-Za-z]+)?)'
0010 | 0001 | '([a-zA-Z][a-zA-Z]|[iIxX]-([a-zA-Z])+)(-[a-zA-Z])*'



cluster 21 stats:
nPatterns: 4.0
nProjects: 24
shortest: ^\s*=\s*([^\s;,]*)
Features:

1: LIT|a literal character | 8.0
2: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 3.25
3: KLE|zero-or-more repetition | 3.0
4: NCCC|negated CCC | 1.25
5: ADD|one-or-more repetition | 1.0
6: QST|zero-or-one repetition | 1.0
7: STR|start-of-line | 0.75
8: CG|a capture group | 0.5
9: END|end-of-line | 0.5
10: OR|logical or | 0.5
11: ANY|any non-newline char | 0.25
12: CCC|custom character class | 0.25
13: WRD|[a-zA-Z0-9\_] | 0.25


0000 | 0015 | '^\\s*=\\s*([^\\s;,]*)'
0001 | 0006 | '^\\s*\\|\\s.*\\s\\|\\s*$|^\\s*\\+[=+-]+\\+\\s*$'
0002 | 0002 | '\\s*([^\\s\\(\\)"\\\'=,\\[\\]/\\?]+)\\s*'
0003 | 0001 | '--?\\w+|=?"[^"]*"|=?\'[^\']*\'|=?[^\\s]+'



cluster 22 stats:
nPatterns: 9.0
nProjects: 24
shortest: rgba?\(([\d, \%\.]+)\)
Features:

1: LIT|a literal character | 15.11111111111111
2: CG|a capture group | 2.7777777777777777
3: DEC|any of: 0123456789 | 2.7777777777777777
4: ADD|one-or-more repetition | 2.2222222222222223
5: QST|zero-or-one repetition | 2.111111111111111
6: CCC|custom character class | 2.0
7: KLE|zero-or-more repetition | 1.1111111111111112
8: OR|logical or | 0.7777777777777778
9: NCG|group without capturing | 0.6666666666666666
10: ANY|any non-newline char | 0.2222222222222222
11: NCCC|negated CCC | 0.1111111111111111
12: NWSP|any non-whitespace | 0.1111111111111111
13: RNG|chars within a range | 0.1111111111111111
14: WRD|[a-zA-Z0-9\_] | 0.1111111111111111


0000 | 0014 | '(.*/|)([^/]+\\.[a-z]+:\\d+):(\\d+:)? warning:'
0001 | 0002 | 'range\\([ ]*([-]?\\d+|n).*\\)'
0002 | 0002 | '(([umsg]asser(t|ted))) *\\(( *)(\\d+)'
0003 | 0001 | 'rgba?\\(([\\d, \\%\\.]+)\\)'
0004 | 0001 | '[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?'
0005 | 0001 | '[-+]?(?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?'
0006 | 0001 | '(takes [\\w ]+ )(\\d+)( arguments? \\()(\\d+)( given\\))'
0007 | 0001 | '([-+]?(?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[dD]((?:[-+]?\\d+)?)'
0008 | 0001 | '(d  ((ext)?demo(needed)?|other)-\\d[.]\\d-py)\\d[.]\\d(-\\S+)?[.]egg'



cluster 23 stats:
nPatterns: 3.0
nProjects: 22
shortest: ^ *\n
Features:

1: LIT|a literal character | 1.6666666666666667
2: KLE|zero-or-more repetition | 1.0
3: STR|start-of-line | 1.0
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.3333333333333333


0000 | 0015 | '^\\s*\\n'
0001 | 0013 | '^ *\n'
0002 | 0012 | '^-*\n'



cluster 24 stats:
nPatterns: 5.0
nProjects: 22
shortest: \|
Features:

1: LIT|a literal character | 1.6
2: OR|logical or | 0.8
3: ANY|any non-newline char | 0.4


0000 | 0008 | '\\\\.|.'
0001 | 0007 | '\\|'
0002 | 0003 | '"|\\\\'
0003 | 0003 | '\\.|\\\\'
0004 | 0001 | '\\.|-'



cluster 25 stats:
nPatterns: 4.0
nProjects: 22
shortest: <[^>]*?>
Features:

1: LIT|a literal character | 5.5
2: NCCC|negated CCC | 1.25
3: KLE|zero-or-more repetition | 1.0
4: LZY|as few reps as possible | 0.5
5: OR|logical or | 0.25


0000 | 0019 | '<[^>]*?>'
0001 | 0002 | '<![^>]*>'
0002 | 0001 | '<[^!][^>]*?>'
0003 | 0001 | '<!--[^>]*-->|<!>'



cluster 26 stats:
nPatterns: 2.0
nProjects: 21
shortest: ^(?:=)$
Features:

1: END|end-of-line | 1.0
2: LIT|a literal character | 1.0
3: NCG|group without capturing | 1.0
4: STR|start-of-line | 1.0


0000 | 0021 | u'^(?:=)$'
0001 | 0003 | '^(?:=)$'



cluster 27 stats:
nPatterns: 7.0
nProjects: 21
shortest: ^http://
Features:

1: LIT|a literal character | 9.571428571428571
2: CG|a capture group | 0.8571428571428571
3: QST|zero-or-one repetition | 0.7142857142857143
4: STR|start-of-line | 0.5714285714285714
5: KLE|zero-or-more repetition | 0.2857142857142857
6: OR|logical or | 0.2857142857142857
7: ADD|one-or-more repetition | 0.14285714285714285
8: ANY|any non-newline char | 0.14285714285714285
9: LZY|as few reps as possible | 0.14285714285714285
10: NCCC|negated CCC | 0.14285714285714285


0000 | 0013 | '^http://'
0001 | 0002 | '  http://'
0002 | 0002 | '^http(s)?://'
0003 | 0001 | '(/s/https?:)/+'
0004 | 0001 | '^(http|https)://'
0005 | 0001 | '^(https?|ftp):\\/\\/'
0006 | 0001 | 'https?://([^/]*?)(/.*)?'



cluster 28 stats:
nPatterns: 3.0
nProjects: 20
shortest: Revision: (.+)
Features:

1: LIT|a literal character | 13.666666666666666
2: ADD|one-or-more repetition | 1.0
3: CG|a capture group | 1.0
4: CCC|custom character class | 0.6666666666666666
5: RNG|chars within a range | 0.6666666666666666
6: ANY|any non-newline char | 0.3333333333333333
7: LKA|matching sequence follows | 0.3333333333333333
8: LKB|matching sequence precedes | 0.3333333333333333


0000 | 0017 | 'Revision: (.+)'
0001 | 0002 | 'Revision: ([0-9]+)'
0002 | 0001 | '(?<="v8_revision": ")([0-9]+)(?=")'



cluster 29 stats:
nPatterns: 6.0
nProjects: 20
shortest: (?s)<[^>]*>|&#?\w+;
Features:

1: LIT|a literal character | 7.333333333333333
2: KLE|zero-or-more repetition | 2.3333333333333335
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.1666666666666665
4: ADD|one-or-more repetition | 1.8333333333333333
5: WRD|[a-zA-Z0-9\_] | 1.6666666666666667
6: CG|a capture group | 1.5
7: OR|logical or | 1.5
8: WNW|word/non-word boundary | 1.5
9: NCCC|negated CCC | 1.1666666666666667
10: NCG|group without capturing | 1.1666666666666667
11: QST|zero-or-one repetition | 1.0
12: SNG|exactly n repetition | 0.6666666666666666
13: END|end-of-line | 0.5
14: CCC|custom character class | 0.3333333333333333
15: STR|start-of-line | 0.3333333333333333
16: OPT|options wrapper | 0.16666666666666666


0000 | 0008 | '(?:;\\s*|\\s+)(\\b\\w{2}\\b(?:-\\b\\w{2}\\b)?)\\s*;|(?:\\(|\\[|;)\\s*(\\b\\w{2}\\b(?:-\\b\\w{2}\\b)?)\\s*(?:\\]|\\)|;)'
0001 | 0006 | '\\([^()]*\\b(?:[\\w:]|<[^()]*>)+(\\s?&|&\\s?)\\w+'
0002 | 0004 | u'^\\s*([-\\w]+\\s*:[^:;]*(;\\s*|$))*$'
0003 | 0001 | u'(?s)<[^>]*>|&#?\\w+;'
0004 | 0001 | '^([^<,]+)\\s*(?:<([^>,]+)>)?$'
0005 | 0001 | '\\s+(\\w+)\\s+"(&#\\w+;|[^&"]*)"'



cluster 30 stats:
nPatterns: 18.0
nProjects: 20
shortest: [\d\.]+
Features:

1: LIT|a literal character | 5.166666666666667
2: ADD|one-or-more repetition | 1.6666666666666667
3: CCC|custom character class | 1.2222222222222223
4: CG|a capture group | 1.2222222222222223
5: DEC|any of: 0123456789 | 0.9444444444444444
6: WRD|[a-zA-Z0-9\_] | 0.9444444444444444
7: QST|zero-or-one repetition | 0.3888888888888889
8: NWSP|any non-whitespace | 0.2777777777777778
9: ANY|any non-newline char | 0.2222222222222222
10: KLE|zero-or-more repetition | 0.1111111111111111
11: NCCC|negated CCC | 0.1111111111111111
12: STR|start-of-line | 0.1111111111111111
13: LZY|as few reps as possible | 0.05555555555555555
14: NLKA|sequence doesn't follow  | 0.05555555555555555
15: NLKB|sequence doesn't precede | 0.05555555555555555
16: OPT|options wrapper | 0.05555555555555555
17: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.05555555555555555


0000 | 0004 | '\\[(\\d?\\d?\\d?)%\\]'
0001 | 0002 | '[\\d\\.]+'
0002 | 0002 | '([+-]?[\\d\\.]+)(\\S+)'
0003 | 0001 | '[^\\w\\-]'
0004 | 0001 | '^[\\w._-]+'
0005 | 0001 | '([+-]?\\d+)'
0006 | 0001 | '([\\w._-]+)'
0007 | 0001 | '([\\w\\d]+)'
0008 | 0001 | '[^\\w\\s@+.-]'
0009 | 0001 | '\\([\\d,]+\\)'
0010 | 0001 | '[\\w\\d\\-_\\.]+'
0011 | 0001 | '(\\S+)([ \t]*?)(.*)'
0012 | 0001 | '^[\\w\\d\\.]+@[\\w\\d\\.]+'
0013 | 0001 | u'(?<![\\w])(\\d+)L(?![\\w])'
0014 | 0001 | '(.+)[-_](\\d+)\\.(\\d+)(\\w?)'
0015 | 0001 | '[\\w\\.\\-]+@[\\w\\.\\-]+\\.\\w\\w\\w'
0016 | 0001 | '(.+)[-_](\\d+)\\.(\\d+)\\.(\\d+)(\\w?)'
0017 | 0001 | '(?x)\n            [\\r\\n]+(\\S+)\n            [\\r\\n]+(\\S+)\n            [\\r\\n]+.+[\\r\\n]+(\\S+)\n'



cluster 31 stats:
nPatterns: 6.0
nProjects: 19
shortest: ^(\d{10})$
Features:

1: LIT|a literal character | 2.8333333333333335
2: CG|a capture group | 1.3333333333333333
3: ADD|one-or-more repetition | 1.0
4: DEC|any of: 0123456789 | 1.0
5: END|end-of-line | 0.8333333333333334
6: STR|start-of-line | 0.8333333333333334
7: DBB|$n\le x \le m$ repetition | 0.3333333333333333
8: NCCC|negated CCC | 0.3333333333333333
9: SNG|exactly n repetition | 0.3333333333333333
10: ANY|any non-newline char | 0.16666666666666666
11: CCC|custom character class | 0.16666666666666666
12: LWB|at least n repetition | 0.16666666666666666


0000 | 0012 | '^(\\d{10})$'
0001 | 0003 | u'^(\\d{10})$'
0002 | 0001 | '^(.+):(\\d{1,5})$'
0003 | 0001 | '^\\d+(\\.\\d+){1,}$'
0004 | 0001 | '[,;:\\(\\)\\[\\]\\{\\}<>]+'
0005 | 0001 | '^([^;]+);([^;]+):(\\d{1,5})$'



cluster 32 stats:
nPatterns: 16.0
nProjects: 19
shortest: <link href="(.*?)"
Features:

1: LIT|a literal character | 31.0
2: ANY|any non-newline char | 1.3125
3: KLE|zero-or-more repetition | 1.25
4: CG|a capture group | 1.1875
5: LZY|as few reps as possible | 0.5625
6: ADD|one-or-more repetition | 0.5
7: CCC|custom character class | 0.3125
8: WRD|[a-zA-Z0-9\_] | 0.3125
9: PNG|named capture group | 0.1875
10: NWRD|non-word chars | 0.125
11: OR|logical or | 0.125
12: QST|zero-or-one repetition | 0.125
13: DEC|any of: 0123456789 | 0.0625
14: NCCC|negated CCC | 0.0625
15: NCG|group without capturing | 0.0625
16: OPT|options wrapper | 0.0625
17: RNG|chars within a range | 0.0625


0000 | 0002 | '(?s)<failure (.*?)>.*?</failure>'
0001 | 0002 | '@import url\\((?P<filename>.*)\\)'
0002 | 0002 | '<a href="function\\..*?\\.html">(.*?)</a>'
0003 | 0002 | '<span id=short-desc-content>([^<]*)</span>'
0004 | 0002 | '<meta name="video_height" content="([0-9]+)" />'
0005 | 0002 | '\\^phoneCallContactId\\^=\\^urn:ace:(?P<identifier>.*)'
0006 | 0002 | "<div class='lyricbox'><div class='rtMatcher'>.*?</div>(.*?)<!--"
0007 | 0001 | '<link href="(.*?)"'
0008 | 0001 | '(<h5><a name="?akas"?.*</table>)'
0009 | 0001 | '<viewer version_patch="(\\d+)" />'
0010 | 0001 | '<p>Raw output: <a href="(.*)">(.*)</a>'
0011 | 0001 | ".*window\\.location\\.href='(?P<href>.*)'.*"
0012 | 0001 | u'<a href="(.*?)" class="historylink">History</a>'
0013 | 0001 | '<a href="(http://\\w+.craigslist.org/)">([\\w ]+)</a>'
0014 | 0001 | '(?:aka|birth name) (<em>")(.*?)"(<br>|<\\/em>|<\\/td>)'
0015 | 0001 | '<a href="(http://\\w+.craigslist.org/)">([\\w ]+)\\W*[/-]+\\W*([\\w ]+)</a>'



cluster 33 stats:
nPatterns: 3.0
nProjects: 17
shortest: ^\S+
Features:

1: ADD|one-or-more repetition | 1.3333333333333333
2: STR|start-of-line | 1.0
3: NWSP|any non-whitespace | 0.6666666666666666
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.6666666666666666
5: END|end-of-line | 0.3333333333333333


0000 | 0014 | '^\\s+$'
0001 | 0002 | '^\\S+\\s+'
0002 | 0001 | '^\\S+'



cluster 34 stats:
nPatterns: 3.0
nProjects: 17
shortest: coding[:=]\s*([-\w_.]+)
Features:

1: LIT|a literal character | 11.666666666666666
2: ADD|one-or-more repetition | 2.0
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.0
4: CCC|custom character class | 1.3333333333333333
5: KLE|zero-or-more repetition | 1.0
6: WRD|[a-zA-Z0-9\_] | 1.0
7: CG|a capture group | 0.6666666666666666
8: PNG|named capture group | 0.3333333333333333


0000 | 0013 | 'coding[:=]\\s*([-\\w_.]+)'
0001 | 0002 | 'coding[:=]\\s*(?P<encoding>[-\\w.]+)'
0002 | 0002 | '#\\s*-\\*-\\s+coding:\\s+(\\w+)\\s+-\\*-'



cluster 35 stats:
nPatterns: 5.0
nProjects: 16
shortest: %(.)
Features:

1: LIT|a literal character | 1.2
2: ANY|any non-newline char | 1.0
3: CG|a capture group | 1.0
4: NWNW|negated WNW | 0.4


0000 | 0008 | '\\B(b.)\\B'
0001 | 0004 | u'\\\\(.)'
0002 | 0002 | '%(.)'
0003 | 0001 | '%(..)'
0004 | 0001 | '(\\\\")'



cluster 36 stats:
nPatterns: 4.0
nProjects: 16
shortest: .*?\b(as)\b
Features:

1: LIT|a literal character | 5.25
2: CG|a capture group | 1.75
3: ADD|one-or-more repetition | 1.5
4: LZY|as few reps as possible | 1.5
5: ANY|any non-newline char | 1.25
6: KLE|zero-or-more repetition | 1.25
7: DEC|any of: 0123456789 | 1.0
8: WNW|word/non-word boundary | 0.5
9: WRD|[a-zA-Z0-9\_] | 0.5


0000 | 0006 | '.*?\\b(as)\\b'
0001 | 0002 | '(.*?) (.*?) as (\\w+)'
0002 | 0001 | 'class (\\w+?)\\('
0003 | 0001 | 'mass .*?(\\d+\\.\\d+).*?(\\d+\\.\\d+)'



cluster 37 stats:
nPatterns: 12.0
nProjects: 16
shortest: [0-9a-fA-F]{6}
Features:

1: LIT|a literal character | 9.083333333333334
2: RNG|chars within a range | 4.083333333333333
3: CCC|custom character class | 1.5
4: SNG|exactly n repetition | 1.5
5: CG|a capture group | 0.9166666666666666
6: END|end-of-line | 0.6666666666666666
7: STR|start-of-line | 0.5833333333333334
8: DBB|$n\le x \le m$ repetition | 0.3333333333333333
9: ADD|one-or-more repetition | 0.16666666666666666
10: OR|logical or | 0.16666666666666666
11: WNW|word/non-word boundary | 0.16666666666666666
12: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.16666666666666666


0000 | 0003 | '^#[0-9A-Fa-f]{6}$'
0001 | 0002 | '^\\#([0-9a-fA-F]{6})$'
0002 | 0002 | '\\\\x([0-9a-fA-F]{2}|[0-9a-fA-F])'
0003 | 0001 | '[0-9a-fA-F]{6}'
0004 | 0001 | '#[0-9a-fA-F]{6}'
0005 | 0001 | '^([a-fA-F0-9]{64})$'
0006 | 0001 | '^([A-Fa-f0-9]{2,2}){3,4}$'
0007 | 0001 | '^([0-9a-fA-F]{2}(:|$)){6}$'
0008 | 0001 | '\\s+(([0-9A-F]{2}:){5}[0-9A-F]{2})\\s+'
0009 | 0001 | '^([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2}$'
0010 | 0001 | '\\b([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}\\b'
0011 | 0001 | '^([0-9a-fA-F]{1,2}:){5}[0-9a-fA-F]{1,2}$'



cluster 38 stats:
nPatterns: 3.0
nProjects: 15
shortest: [\s.]
Features:

1: LIT|a literal character | 1.3333333333333333
2: CCC|custom character class | 1.0
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0


0000 | 0011 | '[\\s.]'
0001 | 0003 | u'[\\-\\s]'
0002 | 0001 | "[\\s'\\\\]"



cluster 39 stats:
nPatterns: 5.0
nProjects: 15
shortest: (?<!\\),
Features:

1: LIT|a literal character | 3.2
2: NLKB|sequence doesn't precede | 0.8
3: CG|a capture group | 0.4
4: NLKA|sequence doesn't follow  | 0.4
5: KLE|zero-or-more repetition | 0.2
6: LKB|matching sequence precedes | 0.2


0000 | 0005 | '(?<!\\\\),'
0001 | 0004 | u'(?<!%)%(?!%)'
0002 | 0004 | '(?<!\\\\)((\\\\\\\\)*)\\\\n'
0003 | 0001 | '(?<!\\\\)%'
0004 | 0001 | '/(?<=,)(?! )/'



cluster 40 stats:
nPatterns: 4.0
nProjects: 15
shortest: ^(?P<number>\d{7})(?P<check>\d)$
Features:

1: DEC|any of: 0123456789 | 3.75
2: PNG|named capture group | 3.0
3: SNG|exactly n repetition | 1.25
4: STR|start-of-line | 1.0
5: END|end-of-line | 0.75
6: DBB|$n\le x \le m$ repetition | 0.25
7: LIT|a literal character | 0.25
8: QST|zero-or-one repetition | 0.25


0000 | 0012 | '^(?P<number>\\d{7})(?P<check>\\d)$'
0001 | 0011 | '^(?P<initial>\\d{1})(?P<yy>\\d\\d)(?P<mm>\\d\\d)(?P<dd>\\d\\d)(?P<mid>\\d{4})(?P<checksum>\\d{1})'
0002 | 0003 | u'^(?P<number>\\d{7})(?P<check>\\d)$'
0003 | 0003 | u'^(?P<number>\\d{1,8})-?(?P<check>\\d)$'



cluster 41 stats:
nPatterns: 3.0
nProjects: 14
shortest: .*?\n
Features:

1: LIT|a literal character | 1.6666666666666667
2: ANY|any non-newline char | 1.0
3: KLE|zero-or-more repetition | 1.0
4: LZY|as few reps as possible | 0.6666666666666666
5: WNW|word/non-word boundary | 0.6666666666666666
6: QST|zero-or-one repetition | 0.3333333333333333


0000 | 0012 | '.*?\\n'
0001 | 0001 | '.*\\n?'
0002 | 0001 | '.*?\\bpni\\b'



cluster 42 stats:
nPatterns: 4.0
nProjects: 14
shortest: ([\x7F])
Features:

1: LIT|a literal character | 3.0
2: CCC|custom character class | 1.5
3: RNG|chars within a range | 1.25
4: CG|a capture group | 0.75
5: ADD|one-or-more repetition | 0.25


0000 | 0009 | '([\\x00-\\x7F])+'
0001 | 0003 | '\\\\([0-3][0-7][0-7])'
0002 | 0001 | '([\\x7F])'
0003 | 0001 | u'[\\000-\\037]'



cluster 43 stats:
nPatterns: 3.0
nProjects: 14
shortest: 0x([0-9a-fA-F]+)L?
Features:

1: LIT|a literal character | 20.666666666666668
2: RNG|chars within a range | 9.0
3: CCC|custom character class | 3.0
4: CG|a capture group | 1.6666666666666667
5: ADD|one-or-more repetition | 0.6666666666666666
6: QST|zero-or-one repetition | 0.6666666666666666
7: ENDZ|absolute end of string | 0.3333333333333333
8: NCCC|negated CCC | 0.3333333333333333
9: STR|start-of-line | 0.3333333333333333


0000 | 0010 | '0x([0-9a-fA-F]+)L?'
0001 | 0003 | '&#([xX]?[0-9a-fA-F]+)[^0-9a-fA-F]'
0002 | 0001 | '\\A#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])\\Z'



cluster 44 stats:
nPatterns: 2.0
nProjects: 13
shortest: \-+
Features:

1: LIT|a literal character | 1.5
2: ADD|one-or-more repetition | 1.0


0000 | 0011 | '\\-+'
0001 | 0001 | u'--+'



cluster 45 stats:
nPatterns: 2.0
nProjects: 13
shortest: ".*"$
Features:

1: LIT|a literal character | 2.0
2: ANY|any non-newline char | 1.0
3: END|end-of-line | 1.0
4: KLE|zero-or-more repetition | 1.0


0000 | 0011 | '".*"$'
0001 | 0001 | '//.*$'



cluster 46 stats:
nPatterns: 3.0
nProjects: 13
shortest: \\n
Features:

1: LIT|a literal character | 2.3333333333333335


0000 | 0006 | '\\\\n'
0001 | 0005 | '\\\\\\n'
0002 | 0001 | '\\n:\\n'



cluster 47 stats:
nPatterns: 2.0
nProjects: 13
shortest: SECRET|PASSWORD|PROFANITIES_LIST
Features:

1: LIT|a literal character | 34.5
2: OR|logical or | 1.0


0000 | 0008 | 'SECRET|PASSWORD|PROFANITIES_LIST|SIGNATURE'
0001 | 0007 | 'SECRET|PASSWORD|PROFANITIES_LIST'



cluster 48 stats:
nPatterns: 4.0
nProjects: 13
shortest: #define NODE_MAJOR_VERSION
Features:

1: LIT|a literal character | 25.5
2: ADD|one-or-more repetition | 1.5
3: CG|a capture group | 1.5
4: DEC|any of: 0123456789 | 1.25
5: KLE|zero-or-more repetition | 1.25
6: ANY|any non-newline char | 0.5
7: NDEC|any non-decimal | 0.5
8: STR|start-of-line | 0.5
9: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5
10: NCG|group without capturing | 0.25
11: QST|zero-or-one repetition | 0.25


0000 | 0005 | '#define NODE_MAJOR_VERSION'
0001 | 0004 | '^#define SQLITE_VERSION\\D*(\\d+)\\.(\\d+)\\.(\\d+)(?:\\.(\\d+))?\\D*'
0002 | 0003 | '^#define.*ENGINE_VERSION\t*"DOOM (.*)"'
0003 | 0001 | '#define\\swxMAJOR_VERSION\\s+(\\d+)'



cluster 49 stats:
nPatterns: 5.0
nProjects: 13
shortest: ^[1-9]\d{2} ?\d{2}$
Features:

1: LIT|a literal character | 8.8
2: CCC|custom character class | 2.8
3: CG|a capture group | 2.8
4: RNG|chars within a range | 2.2
5: QST|zero-or-one repetition | 2.0
6: SNG|exactly n repetition | 2.0
7: DEC|any of: 0123456789 | 1.8
8: END|end-of-line | 1.0
9: STR|start-of-line | 1.0
10: ADD|one-or-more repetition | 0.2
11: ANY|any non-newline char | 0.2
12: KLE|zero-or-more repetition | 0.2
13: NCG|group without capturing | 0.2


0000 | 0011 | '^[1-9]\\d{2} ?\\d{2}$'
0001 | 0005 | '^\\d{15}(\\d{2}[0-9xX])?$'
0002 | 0002 | '^(?:852-?)?(\\d{4})[-\\.]?(\\d{4})$'
0003 | 0001 | '(^\\(?(\\d{3})\\)?[- .]?(\\d{3})[- .]?(\\d{4})$)'
0004 | 0001 | '^([0-9]{4})-([0-1][0-9])-([0-3][0-9])(-([0-2][0-9])-([0-5][0-9]))? +(.*)$'



cluster 50 stats:
nPatterns: 7.0
nProjects: 13
shortest: \s*(\n|$)
Features:

1: LIT|a literal character | 4.857142857142857
2: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.142857142857143
3: KLE|zero-or-more repetition | 2.0
4: CG|a capture group | 1.8571428571428572
5: OR|logical or | 1.2857142857142858
6: ADD|one-or-more repetition | 0.7142857142857143
7: NCG|group without capturing | 0.42857142857142855
8: ANY|any non-newline char | 0.2857142857142857
9: LZY|as few reps as possible | 0.2857142857142857
10: QST|zero-or-one repetition | 0.2857142857142857
11: END|end-of-line | 0.14285714285714285
12: PNG|named capture group | 0.14285714285714285
13: STR|start-of-line | 0.14285714285714285


0000 | 0003 | '(\\s*\\=)|(\\s*\\:)'
0001 | 0003 | '(?:\\s*|((?:\\\\\\\\)+))\\\\\\n\\s*'
0002 | 0002 | '\\s+|(?:\\s*,\\s*)'
0003 | 0002 | '^\\s*(>>> )?(\\.\\.\\. )?raise(\\s+(\\\'|\\")|\\s*(\\(\\s*)+(\\\'|\\"))'
0004 | 0001 | '\\s*(\\n|$)'
0005 | 0001 | '\\s*(?P<a>,|:)\\s*'
0006 | 0001 | '(".*?")|(\'.*?\')|(\\s+)'



cluster 51 stats:
nPatterns: 4.0
nProjects: 12
shortest: call.*mount.*first
Features:

1: LIT|a literal character | 17.0
2: KLE|zero-or-more repetition | 1.5
3: ANY|any non-newline char | 1.25
4: CG|a capture group | 0.75
5: END|end-of-line | 0.25
6: OPT|options wrapper | 0.25
7: STR|start-of-line | 0.25
8: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.25


0000 | 0007 | '^columns .* are not unique$'
0001 | 0002 | 'call.*mount.*first'
0002 | 0002 | '(?i)gesch\xc3\xa4fts(.*)nummer'
0003 | 0001 | '(\\s*configuration:)(.*)\n'



cluster 52 stats:
nPatterns: 6.0
nProjects: 12
shortest: ^(\s*)<.+> 
Features:

1: LIT|a literal character | 7.666666666666667
2: KLE|zero-or-more repetition | 1.1666666666666667
3: CG|a capture group | 1.0
4: ADD|one-or-more repetition | 0.6666666666666666
5: NCCC|negated CCC | 0.6666666666666666
6: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5
7: CCC|custom character class | 0.3333333333333333
8: STR|start-of-line | 0.3333333333333333
9: WRD|[a-zA-Z0-9\_] | 0.3333333333333333
10: ANY|any non-newline char | 0.16666666666666666
11: OPT|options wrapper | 0.16666666666666666


0000 | 0006 | '<root>([^<]*)</root>'
0001 | 0002 | '^(\\s*)<.+> '
0002 | 0001 | '(?i)<br[^>]*>'
0003 | 0001 | '^(<[^>]*/>)\\s*'
0004 | 0001 | '<TITLE>([^<]*)</TITLE>'
0005 | 0001 | '<([\\w ]+(,\\s*[\\w]+)+)>'



cluster 53 stats:
nPatterns: 3.0
nProjects: 12
shortest: [^A-Za-z0-9\-_.~!*'();:@&=+$,/?%#[\]]
Features:

1: LIT|a literal character | 28.333333333333332
2: RNG|chars within a range | 4.0
3: CCC|custom character class | 1.0
4: ADD|one-or-more repetition | 0.3333333333333333
5: END|end-of-line | 0.3333333333333333
6: KLE|zero-or-more repetition | 0.3333333333333333
7: NCCC|negated CCC | 0.3333333333333333
8: NCG|group without capturing | 0.3333333333333333
9: OR|logical or | 0.3333333333333333
10: SNG|exactly n repetition | 0.3333333333333333


0000 | 0006 | "[^A-Za-z0-9\\-_.~!*'();:@&=+$,/?%#[\\]]"
0001 | 0005 | "(?:[-a-zA-Z0-9!$&'\\(\\)\\*+,;=._~]|%[a-zA-Z0-9]{2})+$"
0002 | 0001 | '[- \n\t\ra-zA-Z0-9()+,./:=?;!*#@$_%]*'



cluster 54 stats:
nPatterns: 3.0
nProjects: 11
shortest: \r|\n|\r\n
Features:

1: LIT|a literal character | 4.0
2: OR|logical or | 1.0
3: NCG|group without capturing | 0.6666666666666666
4: CG|a capture group | 0.3333333333333333
5: NLKA|sequence doesn't follow  | 0.3333333333333333
6: NLKB|sequence doesn't precede | 0.3333333333333333


0000 | 0007 | '(?:(?<!\\r)\\n)|(?:\\r(?!\\n))'
0001 | 0002 | '\r|\n|\r\n'
0002 | 0002 | '(\\r\\n|\\n|\\r)'



cluster 55 stats:
nPatterns: 6.0
nProjects: 11
shortest: <div.*?>\n
Features:

1: LIT|a literal character | 9.666666666666666
2: ANY|any non-newline char | 1.3333333333333333
3: KLE|zero-or-more repetition | 1.3333333333333333
4: LZY|as few reps as possible | 1.1666666666666667
5: CG|a capture group | 0.6666666666666666
6: PNG|named capture group | 0.16666666666666666


0000 | 0007 | '<title>(.*?)</title>'
0001 | 0001 | '<div.*?>\\n'
0002 | 0001 | '<div.*?>(.*?)</'
0003 | 0001 | '"title":"(.*?)",'
0004 | 0001 | '/(?P<tenant_id>.*?)/.*'
0005 | 0001 | '<studio>(.*?)</studio>'



cluster 56 stats:
nPatterns: 3.0
nProjects: 11
shortest: ^%include\s"([^"]+)"
Features:

1: LIT|a literal character | 18.333333333333332
2: ADD|one-or-more repetition | 5.0
3: CG|a capture group | 3.6666666666666665
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 3.3333333333333335
5: RNG|chars within a range | 2.6666666666666665
6: CCC|custom character class | 2.0
7: ANY|any non-newline char | 0.6666666666666666
8: KLE|zero-or-more repetition | 0.6666666666666666
9: NCCC|negated CCC | 0.6666666666666666
10: STR|start-of-line | 0.6666666666666666
11: END|end-of-line | 0.3333333333333333
12: NCG|group without capturing | 0.3333333333333333
13: NWSP|any non-whitespace | 0.3333333333333333
14: QST|zero-or-one repetition | 0.3333333333333333
15: SNG|exactly n repetition | 0.3333333333333333


0000 | 0008 | '^([a-f0-9]+)\\s(.{7})\\s(\\S+)\\s+([a-f0-9]+)\\s+(?:\\.hidden\\s+)?(.*)$'
0001 | 0002 | '([^:]*):\\s+scsi([0-9]+)\\s+channel=([0-9]+)\\s+id=([0-9]+)\\s+lun=([0-9]+)'
0002 | 0001 | '^%include\\s"([^"]+)"'



cluster 57 stats:
nPatterns: 7.0
nProjects: 11
shortest: projects/([^/]+)/?$
Features:

1: LIT|a literal character | 24.428571428571427
2: CG|a capture group | 1.7142857142857142
3: QST|zero-or-one repetition | 1.7142857142857142
4: ADD|one-or-more repetition | 1.2857142857142858
5: NCCC|negated CCC | 1.1428571428571428
6: ANY|any non-newline char | 0.8571428571428571
7: END|end-of-line | 0.8571428571428571
8: STR|start-of-line | 0.5714285714285714
9: OR|logical or | 0.42857142857142855
10: KLE|zero-or-more repetition | 0.2857142857142857
11: NCG|group without capturing | 0.14285714285714285


0000 | 0004 | '^https?://bitbucket.org/'
0001 | 0002 | 'projects/([^/]+)/?$'
0002 | 0002 | '^/(artist|release|track|label|release-group)/([^/]*)$'
0003 | 0001 | '/changeset(?:/([^/]+)(/.*)?)?$'
0004 | 0001 | '^https?://bitbucket.org/([^/]+/[^/]+)/?$'
0005 | 0001 | 'https?://github.com/([^/]+/[^/]+)/tags/?$'
0006 | 0001 | '^/(usr/)?(s?bin|games|libexec(/.+)?|(lib(64)?|share)/.+)/[^/]+$'



cluster 58 stats:
nPatterns: 2.0
nProjects: 10
shortest: \S
Features:

1: NWSP|any non-whitespace | 1.0
2: LIT|a literal character | 0.5


0000 | 0005 | ',\\S'
0001 | 0005 | u'\\S'



cluster 59 stats:
nPatterns: 4.0
nProjects: 10
shortest: .*((\.textile$)|(\.markdown$)|(\.org$)|(\.html$))
Features:

1: LIT|a literal character | 48.25
2: CG|a capture group | 2.5
3: OR|logical or | 1.5
4: END|end-of-line | 1.25
5: ADD|one-or-more repetition | 0.5
6: ANY|any non-newline char | 0.5
7: DEC|any of: 0123456789 | 0.5
8: KLE|zero-or-more repetition | 0.5
9: QST|zero-or-one repetition | 0.5
10: STR|start-of-line | 0.5
11: NCG|group without capturing | 0.25
12: WRD|[a-zA-Z0-9\_] | 0.25


0000 | 0007 | '^(acc|borland|como|cw|dmc|darwin|gcc|hp_cxx|intel|kylix|vc|mgw|qcc|sun|vacpp)\\d*$'
0001 | 0001 | '.*((\\.textile$)|(\\.markdown$)|(\\.org$)|(\\.html$))'
0002 | 0001 | '//.\\.thumbs\\.4chan\\.org/\\w+/thumb/\\d+s\\.(?:jpg|gif|png|jpeg)'
0003 | 0001 | '^/((usr/)?s?bin|etc/(rc\\.d/init\\.d|X11/xinit\\.d|cron\\.(hourly|daily|monthly|weekly)))/'



cluster 60 stats:
nPatterns: 2.0
nProjects: 9
shortest: (:*)
Features:

1: CG|a capture group | 1.0
2: KLE|zero-or-more repetition | 1.0
3: LIT|a literal character | 1.0


0000 | 0008 | '(:*)'
0001 | 0001 | u'(x*)'



cluster 61 stats:
nPatterns: 3.0
nProjects: 9
shortest: [\x00-\x20]
Features:

1: LIT|a literal character | 2.3333333333333335
2: CCC|custom character class | 1.0
3: RNG|chars within a range | 1.0


0000 | 0007 | '[\\x00-\\x20]'
0001 | 0003 | '[\\x00-\\x1f]'
0002 | 0002 | '[=\x7f-\xff]'



cluster 62 stats:
nPatterns: 7.0
nProjects: 9
shortest: "([^ ]+?)"
Features:

1: LIT|a literal character | 5.714285714285714
2: ADD|one-or-more repetition | 1.2857142857142858
3: CG|a capture group | 1.1428571428571428
4: NCCC|negated CCC | 1.1428571428571428
5: LZY|as few reps as possible | 0.5714285714285714
6: QST|zero-or-one repetition | 0.5714285714285714
7: CCC|custom character class | 0.14285714285714285
8: WNW|word/non-word boundary | 0.14285714285714285
9: WRD|[a-zA-Z0-9\_] | 0.14285714285714285


0000 | 0002 | '\\[([^:]+?)\\]'
0001 | 0002 | '@\\w+( [^{}:\n]+)?:'
0002 | 0001 | '"([^ ]+?)"'
0003 | 0001 | '[,]?([^,=]+)='
0004 | 0001 | '{{{([^{]+?)}}}'
0005 | 0001 | "'([^']+?)' \\(qv\\)"
0006 | 0001 | '(\\b[^ ,=]+)="?([^",]+)"?'



cluster 63 stats:
nPatterns: 2.0
nProjects: 8
shortest: (?P<a>x)
Features:

1: LIT|a literal character | 1.0
2: PNG|named capture group | 1.0


0000 | 0008 | '(?P<a>x)'
0001 | 0008 | '(?P<unk>x)'



cluster 64 stats:
nPatterns: 2.0
nProjects: 8
shortest: ^(?:(?:00|\+)386|0)(\d{7,8})$
Features:

1: LIT|a literal character | 5.0
2: CG|a capture group | 2.5
3: DEC|any of: 0123456789 | 2.5
4: ADD|one-or-more repetition | 1.5
5: NCG|group without capturing | 1.5
6: DBB|$n\le x \le m$ repetition | 1.0
7: OR|logical or | 1.0
8: END|end-of-line | 0.5
9: QST|zero-or-one repetition | 0.5
10: STR|start-of-line | 0.5


0000 | 0005 | '^(?:(?:00|\\+)386|0)(\\d{7,8})$'
0001 | 0003 | '(\\d+):(\\d+):(\\d+)(?:\\.(\\d{0,6}))?'



cluster 65 stats:
nPatterns: 3.0
nProjects: 8
shortest: \{include\s+file=.*?\}
Features:

1: LIT|a literal character | 14.333333333333334
2: QST|zero-or-one repetition | 2.6666666666666665
3: ANY|any non-newline char | 1.6666666666666667
4: LZY|as few reps as possible | 1.6666666666666667
5: KLE|zero-or-more repetition | 1.3333333333333333
6: ADD|one-or-more repetition | 0.6666666666666666
7: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.3333333333333333


0000 | 0008 | '\\{include\\s+file=.*?\\}'
0001 | 0004 | '#\\{?if\\}?\\(.+?\\).*?#\\{?end\\}?'
0002 | 0004 | '#\\{?macro\\}?\\(.*?\\).*?#\\{?end\\}?'



cluster 66 stats:
nPatterns: 3.0
nProjects: 8
shortest: (final|stable)$
Features:

1: LIT|a literal character | 25.666666666666668
2: CG|a capture group | 2.0
3: OR|logical or | 1.0
4: END|end-of-line | 0.3333333333333333
5: STR|start-of-line | 0.3333333333333333


0000 | 0005 | '(final|stable)$'
0001 | 0002 | '^(fails|needs-focus|random|skip|asserts|fuzzy)'
0002 | 0001 | '(-devel)|(-debuginfo)|(-static)|(-libs)'



cluster 67 stats:
nPatterns: 4.0
nProjects: 8
shortest: Fennec/([\d.]+)
Features:

1: LIT|a literal character | 7.25
2: ADD|one-or-more repetition | 2.0
3: CCC|custom character class | 2.0
4: DEC|any of: 0123456789 | 2.0
5: CG|a capture group | 1.75
6: KLE|zero-or-more repetition | 0.5


0000 | 0003 | '([\\d.]+) ([\\d.]+) ([\\d.]+) (\\d+)/(\\d+)'
0001 | 0002 | 'Fennec/([\\d.]+)'
0002 | 0002 | '\\(CVS\\) ([\\d\\.]+) '
0003 | 0001 | '/[ ]*[\\d.]+[ ]*kg'



cluster 68 stats:
nPatterns: 2.0
nProjects: 7
shortest: \.exe$
Features:

1: LIT|a literal character | 4.0
2: ANY|any non-newline char | 0.5
3: END|end-of-line | 0.5
4: KLE|zero-or-more repetition | 0.5


0000 | 0004 | '\\.exe$'
0001 | 0003 | '.*\\.exe'



cluster 69 stats:
nPatterns: 3.0
nProjects: 7
shortest: (?:\d{1,3}\.){3}\d{1,3}
Features:

1: DEC|any of: 0123456789 | 3.0
2: LIT|a literal character | 2.3333333333333335
3: DBB|$n\le x \le m$ repetition | 2.0
4: SNG|exactly n repetition | 1.3333333333333333
5: NCG|group without capturing | 0.6666666666666666
6: ANY|any non-newline char | 0.3333333333333333
7: CG|a capture group | 0.3333333333333333
8: KLE|zero-or-more repetition | 0.3333333333333333


0000 | 0004 | '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'
0001 | 0002 | '(?:\\d{1,3}\\.){3}\\d{1,3}'
0002 | 0001 | '(?:\\d{2}:\\d{2}:\\d{2}) (.*)'



cluster 70 stats:
nPatterns: 6.0
nProjects: 7
shortest: [a-zA-Z0-9_]{2,10}
Features:

1: LIT|a literal character | 8.833333333333334
2: RNG|chars within a range | 3.1666666666666665
3: CCC|custom character class | 1.3333333333333333
4: END|end-of-line | 0.8333333333333334
5: DBB|$n\le x \le m$ repetition | 0.6666666666666666
6: STR|start-of-line | 0.6666666666666666
7: LWB|at least n repetition | 0.3333333333333333
8: DEC|any of: 0123456789 | 0.16666666666666666


0000 | 0004 | '^[a-zA-Z0-9-]{1,100}$'
0001 | 0003 | '^[0-9A-Za-z._-]{0,100}$'
0002 | 0001 | '[a-zA-Z0-9_]{2,10}'
0003 | 0001 | '/gs/[a-z0-9\\.\\-_]{3,}$'
0004 | 0001 | '^[a-zA-Z][a-zA-Z\\d_]{2,4}$'
0005 | 0001 | '^[a-z0-9][a-z0-9\\.\\-]{2,}$'



cluster 71 stats:
nPatterns: 2.0
nProjects: 7
shortest: ([0-9]{4}-[0-9]{2}-[0-9]{2})  ([0-9]{4,5}) {1,2}(.*)
Features:

1: LIT|a literal character | 38.0
2: CCC|custom character class | 14.0
3: RNG|chars within a range | 12.0
4: QST|zero-or-one repetition | 4.0
5: CG|a capture group | 3.5
6: OR|logical or | 2.0
7: SNG|exactly n repetition | 1.5
8: DBB|$n\le x \le m$ repetition | 1.0
9: ANY|any non-newline char | 0.5
10: KLE|zero-or-more repetition | 0.5


0000 | 0006 | '([0-9]{4}-[0-9]{2}-[0-9]{2})  ([0-9]{4,5}) {1,2}(.*)'
0001 | 0001 | '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'



cluster 72 stats:
nPatterns: 3.0
nProjects: 6
shortest: [-.]
Features:

1: LIT|a literal character | 2.3333333333333335
2: CCC|custom character class | 1.0


0000 | 0004 | '[-.]'
0001 | 0001 | '[-:]'
0002 | 0001 | '[\\-: ]'



cluster 73 stats:
nPatterns: 4.0
nProjects: 6
shortest: ^\s*(\s?>)+
Features:

1: LIT|a literal character | 3.0
2: KLE|zero-or-more repetition | 1.5
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.5
4: CG|a capture group | 1.25
5: ADD|one-or-more repetition | 0.75
6: ANY|any non-newline char | 0.5
7: LZY|as few reps as possible | 0.5
8: QST|zero-or-one repetition | 0.5
9: BKR|match the $i^{th}$ CG | 0.25
10: STR|start-of-line | 0.25
11: WRD|[a-zA-Z0-9\_] | 0.25


0000 | 0003 | u'<(/?)\\s*b\\s*>'
0001 | 0001 | '^\\s*(\\s?>)+'
0002 | 0001 | '(.*?)\\s+<(.*)>'
0003 | 0001 | '\\<(\\w+?)\\>\\s*\\</\\1\\>'



cluster 74 stats:
nPatterns: 4.0
nProjects: 6
shortest: http://[^/]*(.*)
Features:

1: LIT|a literal character | 8.75
2: CG|a capture group | 2.0
3: ADD|one-or-more repetition | 1.25
4: KLE|zero-or-more repetition | 1.25
5: ANY|any non-newline char | 1.0
6: DEC|any of: 0123456789 | 0.75
7: NCCC|negated CCC | 0.5
8: QST|zero-or-one repetition | 0.5
9: CCC|custom character class | 0.25
10: END|end-of-line | 0.25
11: NCG|group without capturing | 0.25
12: STR|start-of-line | 0.25
13: WRD|[a-zA-Z0-9\_] | 0.25


0000 | 0003 | '<path\\[(\\d+)\\]>(.*)'
0001 | 0001 | 'http://[^/]*(.*)'
0002 | 0001 | '^([\\.\\/\\w]+\\.tex)(:\\d+:.*)'
0003 | 0001 | 'http://([^/:]+)(?::(\\d+))?(/.*)?$'



cluster 75 stats:
nPatterns: 4.0
nProjects: 6
shortest: \s*modtime:\s*(.*)
Features:

1: LIT|a literal character | 10.5
2: KLE|zero-or-more repetition | 2.75
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.25
4: CG|a capture group | 1.75
5: ANY|any non-newline char | 1.5
6: END|end-of-line | 0.75
7: LZY|as few reps as possible | 0.75
8: STR|start-of-line | 0.75
9: ADD|one-or-more repetition | 0.5
10: QST|zero-or-one repetition | 0.25


0000 | 0002 | '\\s*modtime:\\s*(.*)'
0001 | 0002 | '^\\s+:template:\\s*(.*?)\\s*$'
0002 | 0001 | '^(.+?): .*?(\\(attached\\))?$'
0003 | 0001 | '^(.*)(\\stime\\selapsed:\\s*)(.*)\\s*$'



cluster 76 stats:
nPatterns: 5.0
nProjects: 6
shortest: ^platform/(.*?)/
Features:

1: LIT|a literal character | 10.6
2: KLE|zero-or-more repetition | 2.6
3: ANY|any non-newline char | 1.8
4: CG|a capture group | 1.2
5: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0
6: LZY|as few reps as possible | 0.6
7: STR|start-of-line | 0.4
8: ADD|one-or-more repetition | 0.2
9: OPT|options wrapper | 0.2


0000 | 0002 | '(?m)^alias.*virtio'
0001 | 0001 | '^platform/(.*?)/'
0002 | 0001 | 'power_(.*).template'
0003 | 0001 | 'from\\s*(.*?)\\s*import\\s*(.+)'
0004 | 0001 | '.*\\((.*)(\\s*Format*\\s*)\\).*?'



cluster 77 stats:
nPatterns: 6.0
nProjects: 6
shortest: <(?!!)[^>]+>
Features:

1: LIT|a literal character | 6.333333333333333
2: ADD|one-or-more repetition | 1.1666666666666667
3: NCCC|negated CCC | 1.1666666666666667
4: CG|a capture group | 0.8333333333333334
5: QST|zero-or-one repetition | 0.6666666666666666
6: NLKA|sequence doesn't follow  | 0.3333333333333333
7: ANY|any non-newline char | 0.16666666666666666
8: CCC|custom character class | 0.16666666666666666
9: KLE|zero-or-more repetition | 0.16666666666666666
10: LZY|as few reps as possible | 0.16666666666666666
11: NCG|group without capturing | 0.16666666666666666
12: NLKB|sequence doesn't precede | 0.16666666666666666
13: NWSP|any non-whitespace | 0.16666666666666666
14: OR|logical or | 0.16666666666666666


0000 | 0001 | '<(?!!)[^>]+>'
0001 | 0001 | '<(![^-\\[]|\\?)'
0002 | 0001 | '<(?!/?TEXT)[^>]+>'
0003 | 0001 | '<h1[^>]*>(.+?)</h1>'
0004 | 0001 | '(?<!\\\\)[^"\\]\\[\\$]+'
0005 | 0001 | '([^!]+)(?:!([^+-]+)?([+-]\\S+)?)?'



cluster 78 stats:
nPatterns: 4.0
nProjects: 6
shortest: #loadfactor(\s+(\S+))?\s+(\d+\.?\d*)
Features:

1: LIT|a literal character | 8.0
2: ADD|one-or-more repetition | 3.0
3: DEC|any of: 0123456789 | 1.75
4: PNG|named capture group | 1.75
5: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.25
6: CG|a capture group | 0.75
7: QST|zero-or-one repetition | 0.75
8: KLE|zero-or-more repetition | 0.5
9: ANY|any non-newline char | 0.25
10: LZY|as few reps as possible | 0.25
11: NWSP|any non-whitespace | 0.25
12: STR|start-of-line | 0.25


0000 | 0003 | '^\\s+(?P<conn>\\d+)\\s+(?P<acc>\\d+)\\s+(?P<req>\\d+)'
0001 | 0001 | 'database version (?P<version>.+?)\\.?\n'
0002 | 0001 | '#loadfactor(\\s+(\\S+))?\\s+(\\d+\\.?\\d*)'
0003 | 0001 | '(?P<intDigits>\\d*)(?P<dot>\\.)(?P<fracDigits>\\d+)'



cluster 79 stats:
nPatterns: 7.0
nProjects: 6
shortest: typedef (\S+) (.*)
Features:

1: LIT|a literal character | 10.142857142857142
2: KLE|zero-or-more repetition | 2.2857142857142856
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.2857142857142856
4: ADD|one-or-more repetition | 1.7142857142857142
5: CG|a capture group | 1.7142857142857142
6: CCC|custom character class | 1.2857142857142858
7: NWSP|any non-whitespace | 0.8571428571428571
8: ANY|any non-newline char | 0.7142857142857143
9: NCCC|negated CCC | 0.42857142857142855
10: END|end-of-line | 0.14285714285714285
11: STR|start-of-line | 0.14285714285714285


0000 | 0002 | 'http://([^/]+)(/\\S*)\\s*'
0001 | 0002 | '^(\\s+\\(return-type\\s+)([^\\s]+)(\\s*\\))$'
0002 | 0001 | 'typedef (\\S+) (.*)'
0003 | 0001 | '(\\S+[.]savespace[(].*[)])'
0004 | 0001 | '(\\S+)\\s*[.]\\s*type\\s*[(]\\s*[)]'
0005 | 0001 | '(\\S+\\s*)[.]shape\\s*=[^=]\\s*(.+)'
0006 | 0001 | '(\\S+\\s*[(].+),\\s*savespace\\s*=.+\\s*[)]'



cluster 80 stats:
nPatterns: 4.0
nProjects: 6
shortest: developmentRegion = (?P<region>.+);
Features:

1: LIT|a literal character | 51.0
2: KLE|zero-or-more repetition | 2.75
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.5
4: ADD|one-or-more repetition | 1.25
5: PNG|named capture group | 1.25
6: ANY|any non-newline char | 1.0
7: CG|a capture group | 1.0
8: STR|start-of-line | 0.75
9: END|end-of-line | 0.5
10: BKRN|references NCG | 0.25
11: DEC|any of: 0123456789 | 0.25
12: LZY|as few reps as possible | 0.25
13: NWSP|any non-whitespace | 0.25


0000 | 0003 | '\n      ^\\s*   # Start of a new line and whitespace\n      /\\*    # Opening "/*"\n      .*?    # Non greedy match of any characters (including newlines)\n      \\*/    # Closing "*/'
0001 | 0001 | 'developmentRegion = (?P<region>.+);'
0002 | 0001 | '^.*\\s+mail exchanger = (?P<priority>\\d+) (?P<host>\\S+)\\s*$'
0003 | 0001 | '(?P<heading>^\\s*(?P<hmarker>=+)(\\s)*.*(\\s)*(?P=hmarker)( )*$)'



cluster 81 stats:
nPatterns: 4.0
nProjects: 6
shortest: # StopWatch ([\w]+) total/cumulative duration ([0-9.]+). Samples: ([0-9]+)
Features:

1: LIT|a literal character | 65.25
2: ADD|one-or-more repetition | 4.75
3: CG|a capture group | 4.0
4: CCC|custom character class | 2.5
5: OR|logical or | 1.0
6: QST|zero-or-one repetition | 1.0
7: ANY|any non-newline char | 0.75
8: NWSP|any non-whitespace | 0.75
9: WRD|[a-zA-Z0-9\_] | 0.75
10: KLE|zero-or-more repetition | 0.5
11: RNG|chars within a range | 0.5
12: DEC|any of: 0123456789 | 0.25
13: NCCC|negated CCC | 0.25
14: OPT|options wrapper | 0.25


0000 | 0002 | '# StopWatch ([\\w]+) total/cumulative duration ([0-9.]+). Samples: ([0-9]+)'
0001 | 0002 | '((final|abstract)[ \t]+)?((public|private|protected)[ \t]+)?(static[ \t]+)?class[ \t]+\\w+((implements|extends)\\w+)?'
0002 | 0001 | '\\.\\.\\. ([^#]+)#(\\d+) (add|edit|delete|integrate|branch|move/add|move/delete)'
0003 | 0001 | '(?x)\n            [\\r\\n]+(\\S+)\\ \n            (\\S+)\\ +!\\ Time\\ domain.\\ *[\\r\\n]+\n            (\\S+)\\ +!\\ Number\\ of\\ tiers.\\ *[\\r\\n]+"\n'



cluster 82 stats:
nPatterns: 2.0
nProjects: 6
shortest: \n        ^(\#{1,6})  # \1 = string of #'s\n        [ \t]*\n        (.+?)       # \2 = Header text\n        [ \t]*\n        (?<!\\)     # ensure not an escaped trailing '#'\n        \#*         # optional closing #'s (not counted)\n        \n+\n        
Features:

1: LIT|a literal character | 502.0
2: CCC|custom character class | 14.0
3: RNG|chars within a range | 13.5
4: DEC|any of: 0123456789 | 8.5
5: DBB|$n\le x \le m$ repetition | 6.0
6: QST|zero-or-one repetition | 4.5
7: CG|a capture group | 3.0
8: KLE|zero-or-more repetition | 3.0
9: NCG|group without capturing | 3.0
10: SNG|exactly n repetition | 3.0
11: ADD|one-or-more repetition | 2.5
12: OR|logical or | 2.5
13: BKR|match the $i^{th}$ CG | 1.0
14: STR|start-of-line | 1.0
15: ANY|any non-newline char | 0.5
16: END|end-of-line | 0.5
17: LZY|as few reps as possible | 0.5
18: NLKB|sequence doesn't precede | 0.5


0000 | 0005 | "\n        ^(\\#{1,6})  # \\1 = string of #'s\n        [ \\t]*\n        (.+?)       # \\2 = Header text\n        [ \\t]*\n        (?<!\\\\)     # ensure not an escaped trailing '#'\n        \\#*         # optional closing #'s (not counted)\n        \\n+\n        "
0001 | 0001 | "\n        ^\n        (?:\n          # Dotted variants:\n          (?:\n            # Decimal 1-255 (no leading 0's)\n            [3-9]\\d?|2(?:5[0-5]|[0-4]?\\d)?|1\\d{0,2}\n          |\n            0x0*[0-9a-f]{1,2}  # Hexadecimal 0x0 - 0xFF (possible leading 0's)\n          |\n            0+[1-3]?[0-7]{0,2} # Octal 0 - 0377 (possible leading 0's)\n          )\n          (?:                  # Repeat 0-3 times, separated by a dot\n            \\.\n            (?:\n              [3-9]\\d?|2(?:5[0-5]|[0-4]?\\d)?|1\\d{0,2}\n            |\n              0x0*[0-9a-f]{1,2}\n            |\n              0+[1-3]?[0-7]{0,2}\n            )\n          ){0,3}\n        |\n          0x0*[0-9a-f]{1,8}    # Hexadecimal notation, 0x0 - 0xffffffff\n        |\n          0+[0-3]?[0-7]{0,10}  # Octal notation, 0 - 037777777777\n        |\n          # Decimal notation, 1-4294967295:\n          429496729[0-5]|42949672[0-8]\\d|4294967[01]\\d\\d|429496[0-6]\\d{3}|\n          42949[0-5]\\d{4}|4294[0-8]\\d{5}|429[0-3]\\d{6}|42[0-8]\\d{7}|\n          4[01]\\d{8}|[1-3]\\d{0,9}|[4-9]\\d{0,8}\n        )\n        $\n    "



cluster 83 stats:
nPatterns: 2.0
nProjects: 5
shortest: [ ]+
Features:

1: LIT|a literal character | 1.5
2: CCC|custom character class | 1.0
3: ADD|one-or-more repetition | 0.5


0000 | 0004 | '[ ]+'
0001 | 0001 | '[x+]'



cluster 84 stats:
nPatterns: 2.0
nProjects: 5
shortest:  |\(
Features:

1: LIT|a literal character | 1.5
2: OR|logical or | 1.0
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5


0000 | 0004 | ' |\\('
0001 | 0001 | '\\s|\\('



cluster 85 stats:
nPatterns: 4.0
nProjects: 5
shortest: \w+
Features:

1: ADD|one-or-more repetition | 1.0
2: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.75
3: LIT|a literal character | 0.5
4: WRD|[a-zA-Z0-9\_] | 0.5


0000 | 0001 | '\\s+}'
0001 | 0001 | '}\\s+'
0002 | 0001 | u'\\w+'
0003 | 0001 | '\\w+\\s'



cluster 86 stats:
nPatterns: 2.0
nProjects: 5
shortest: (module|def|class) (\w*)
Features:

1: LIT|a literal character | 13.5
2: CG|a capture group | 2.0
3: ADD|one-or-more repetition | 1.0
4: ANY|any non-newline char | 1.0
5: KLE|zero-or-more repetition | 1.0
6: OR|logical or | 1.0
7: STR|start-of-line | 0.5
8: WRD|[a-zA-Z0-9\_] | 0.5
9: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5


0000 | 0004 | '^(\\s*)(def .+:|class .+:)'
0001 | 0001 | '(module|def|class) (\\w*)'



cluster 87 stats:
nPatterns: 2.0
nProjects: 5
shortest: bytes=(\d+)-(\d+)
Features:

1: LIT|a literal character | 7.0
2: KLE|zero-or-more repetition | 3.0
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 3.0
4: ADD|one-or-more repetition | 2.0
5: CG|a capture group | 2.0
6: DEC|any of: 0123456789 | 2.0


0000 | 0004 | 'bytes=(\\d+)-(\\d+)'
0001 | 0001 | '\\s*bytes\\s*=\\s*(\\d+)\\s*-\\s*(\\d+)\\s*'



cluster 88 stats:
nPatterns: 5.0
nProjects: 5
shortest: ^\{.+\}
Features:

1: LIT|a literal character | 2.6
2: ADD|one-or-more repetition | 1.2
3: ANY|any non-newline char | 0.8
4: CG|a capture group | 0.6
5: DEC|any of: 0123456789 | 0.4
6: LZY|as few reps as possible | 0.4
7: END|end-of-line | 0.2
8: SNG|exactly n repetition | 0.2
9: STR|start-of-line | 0.2
10: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.2


0000 | 0001 | '^\\{.+\\}'
0001 | 0001 | '(\\{.+\\})'
0002 | 0001 | '{(\\d+)\\}'
0003 | 0001 | '{{.+?\\|(.+?)}}'
0004 | 0001 | '\\s+\\(\\d{4}\\)$'



cluster 89 stats:
nPatterns: 3.0
nProjects: 5
shortest: filename: \s*(.*)\n
Features:

1: LIT|a literal character | 22.0
2: ANY|any non-newline char | 1.0
3: KLE|zero-or-more repetition | 1.0
4: CG|a capture group | 0.6666666666666666
5: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.3333333333333333


0000 | 0002 | 'the LaTeX files are in (.*)\\.'
0001 | 0002 | 'This is file for test of tar-in.'
0002 | 0001 | 'filename: \\s*(.*)\n'



cluster 90 stats:
nPatterns: 2.0
nProjects: 5
shortest: MARIONETTE_CONTEXT(\s*)=(\s*)[\'|\"](.*?)[\'|\"];
Features:

1: LIT|a literal character | 34.5
2: CG|a capture group | 2.5
3: CCC|custom character class | 1.5
4: KLE|zero-or-more repetition | 1.5
5: NCG|group without capturing | 1.5
6: OR|logical or | 1.5
7: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.5
8: QST|zero-or-one repetition | 1.0
9: ADD|one-or-more repetition | 0.5
10: ANY|any non-newline char | 0.5
11: LZY|as few reps as possible | 0.5
12: RNG|chars within a range | 0.5
13: STR|start-of-line | 0.5
14: WRD|[a-zA-Z0-9\_] | 0.5


0000 | 0004 | '^(DISTRIB_(?:ID|RELEASE|CODENAME|DESCRIPTION))=(?:\'|")?([\\w\\s\\.-_]+)(?:\'|")?'
0001 | 0001 | 'MARIONETTE_CONTEXT(\\s*)=(\\s*)[\'|\\"](.*?)[\'|\\"];'



cluster 91 stats:
nPatterns: 2.0
nProjects: 5
shortest: \s*(([\\'"])(.*?[^\\])\2)\s*([},=]|$)
Features:

1: LIT|a literal character | 10.5
2: CG|a capture group | 2.5
3: WRD|[a-zA-Z0-9\_] | 2.5
4: KLE|zero-or-more repetition | 2.0
5: NCCC|negated CCC | 2.0
6: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.0
7: ADD|one-or-more repetition | 1.5
8: CCC|custom character class | 1.5
9: LKA|matching sequence follows | 1.0
10: NWRD|non-word chars | 1.0
11: OR|logical or | 1.0
12: RNG|chars within a range | 1.0
13: ANY|any non-newline char | 0.5
14: BKR|match the $i^{th}$ CG | 0.5
15: END|end-of-line | 0.5
16: LKB|matching sequence precedes | 0.5
17: LWB|at least n repetition | 0.5
18: LZY|as few reps as possible | 0.5


0000 | 0004 | '(\\s+|[^\\s\\w]*\\w+[^0-9\\W]-(?=\\w+[^0-9\\W])|(?<=[\\w\\!\\"\\\'\\&\\.\\,\\?])-{2,}(?=\\w))'
0001 | 0001 | '\\s*(([\\\'"])(.*?[^\\\\])\\2)\\s*([},=]|$)'



cluster 92 stats:
nPatterns: 4.0
nProjects: 5
shortest: <map id="(.*?)"
Features:

1: LIT|a literal character | 14.25
2: ANY|any non-newline char | 7.25
3: CG|a capture group | 1.75
4: KLE|zero-or-more repetition | 1.75
5: LZY|as few reps as possible | 1.5
6: ADD|one-or-more repetition | 0.25
7: DEC|any of: 0123456789 | 0.25
8: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.25


0000 | 0002 | '<map id="(.*?)"'
0001 | 0001 | 'gene_id \\"(.*?)\\"'
0002 | 0001 | '(\\s)*File "(.*?)", line \\d.+'
0003 | 0001 | '<p.*?begin="(...........)" end="(...........)".*?">(.*?)</p>'



cluster 93 stats:
nPatterns: 4.0
nProjects: 5
shortest: (.*)\.\w{3,4}$
Features:

1: LIT|a literal character | 3.75
2: DEC|any of: 0123456789 | 2.5
3: CG|a capture group | 2.25
4: DBB|$n\le x \le m$ repetition | 1.75
5: ANY|any non-newline char | 1.5
6: KLE|zero-or-more repetition | 1.5
7: ADD|one-or-more repetition | 1.0
8: END|end-of-line | 1.0
9: STR|start-of-line | 0.75
10: WRD|[a-zA-Z0-9\_] | 0.5


0000 | 0002 | '(.*)\\.\\w{3,4}$'
0001 | 0001 | '^(.*)#{(\\w+)}(.*)$'
0002 | 0001 | '^.*(\\d+){(\\d+),(\\d+),(.)}.*$'
0003 | 0001 | '^(\\d{4,4}-\\d{2,2}-\\d{2,2}T\\d{2,2}:\\d{2,2}:\\d{2,2})\\.\\d*Z$'



cluster 94 stats:
nPatterns: 3.0
nProjects: 5
shortest: ^(?P<user>[ugo]{0,3})(?P<action>[\+\-])(?P<value>[rwxst]{1,3})$
Features:

1: LIT|a literal character | 24.666666666666668
2: PNG|named capture group | 3.0
3: CCC|custom character class | 2.3333333333333335
4: DEC|any of: 0123456789 | 1.6666666666666667
5: ADD|one-or-more repetition | 1.3333333333333333
6: SNG|exactly n repetition | 1.3333333333333333
7: DBB|$n\le x \le m$ repetition | 1.0
8: QST|zero-or-one repetition | 1.0
9: STR|start-of-line | 1.0
10: END|end-of-line | 0.6666666666666666
11: RNG|chars within a range | 0.6666666666666666
12: WRD|[a-zA-Z0-9\_] | 0.6666666666666666
13: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.3333333333333333


0000 | 0003 | u'^(?P<residence>\\d{10})(?P<origin>\\w{1,3})[-\\ ]?(?P<birthday>\\d{7})[-\\ ]?(?P<validity>\\d{7})[-\\ ]?(?P<checksum>\\d{1})$'
0001 | 0001 | '^(?P<user>[ugo]{0,3})(?P<action>[\\+\\-])(?P<value>[rwxst]{1,3})$'
0002 | 0001 | '^No line number information available for address\\s+0x[0-9a-f]+ <(?P<sym>\\w+)\\+\\d+>'



cluster 95 stats:
nPatterns: 2.0
nProjects: 5
shortest: DOCTYPE\s+(?P<name>[^\s]*)(\s*PUBLIC\s*"(?P<publicId>.*)"\s*"(?P<systemId1>.*)"|\s*SYSTEM\s*"(?P<systemId2>.*)")?
Features:

1: LIT|a literal character | 132.0
2: KLE|zero-or-more repetition | 8.0
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 7.0
4: ANY|any non-newline char | 5.0
5: PNG|named capture group | 4.0
6: ADD|one-or-more repetition | 3.0
7: CCC|custom character class | 2.5
8: CG|a capture group | 2.5
9: LZY|as few reps as possible | 2.0
10: BKR|match the $i^{th}$ CG | 1.5
11: QST|zero-or-one repetition | 1.5
12: NCG|group without capturing | 1.0
13: OR|logical or | 1.0
14: RNG|chars within a range | 1.0
15: NCCC|negated CCC | 0.5
16: WRD|[a-zA-Z0-9\_] | 0.5


0000 | 0003 | 'DOCTYPE\\s+(?P<name>[^\\s]*)(\\s*PUBLIC\\s*"(?P<publicId>.*)"\\s*"(?P<systemId1>.*)"|\\s*SYSTEM\\s*"(?P<systemId2>.*)")?'
0001 | 0002 | '\n        <!DOCTYPE\n        \\s+(?P<name>[a-zA-Z_:][\\w:.-]*)\n        \\s+(?:\n            SYSTEM\\s+(["\'])(?P<system_id_a>.*?)\\2\n            |\n            PUBLIC\n            \\s+(["\'])(?P<public_id_b>.*?)\\4\n            # HTML 3.2 and 2.0 doctypes don\'t include a system-id.\n            (?:\\s+(["\'])(?P<system_id_b>.*?)\\6)?\n        )\n        (\\s*\\[.*?\\])?        \n        \\s*>\n        '



cluster 96 stats:
nPatterns: 2.0
nProjects: 4
shortest: \w*
Features:

1: LIT|a literal character | 1.5
2: KLE|zero-or-more repetition | 1.0
3: ANY|any non-newline char | 0.5
4: WRD|[a-zA-Z0-9\_] | 0.5


0000 | 0003 | u'\\w*'
0001 | 0001 | '.*\\.fw'



cluster 97 stats:
nPatterns: 2.0
nProjects: 4
shortest: (--|/)
Features:

1: LIT|a literal character | 3.0
2: CG|a capture group | 1.0
3: OR|logical or | 1.0
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5


0000 | 0003 | u'(\\.|\\s|/|-)'
0001 | 0001 | '(--|/)'



cluster 98 stats:
nPatterns: 2.0
nProjects: 4
shortest: ^\s*[#;]
Features:

1: LIT|a literal character | 2.5
2: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0
3: ADD|one-or-more repetition | 0.5
4: CCC|custom character class | 0.5
5: KLE|zero-or-more repetition | 0.5
6: NCCC|negated CCC | 0.5
7: STR|start-of-line | 0.5


0000 | 0003 | '\\*\\s[^:]+:'
0001 | 0001 | '^\\s*[#;]'



cluster 99 stats:
nPatterns: 3.0
nProjects: 4
shortest: ^\(
Features:

1: LIT|a literal character | 1.6666666666666667
2: STR|start-of-line | 0.6666666666666666
3: NWRD|non-word chars | 0.3333333333333333


0000 | 0002 | '\\W_\\('
0001 | 0001 | '^\\('
0002 | 0001 | '^_\\('



cluster 100 stats:
nPatterns: 2.0
nProjects: 4
shortest: ^\s*\*+/
Features:

1: LIT|a literal character | 2.0
2: KLE|zero-or-more repetition | 1.5
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.5
4: STR|start-of-line | 1.0
5: ADD|one-or-more repetition | 0.5
6: END|end-of-line | 0.5


0000 | 0002 | '^\\s*\\*+/'
0001 | 0002 | '^\\s*//\\s*$'



cluster 101 stats:
nPatterns: 2.0
nProjects: 4
shortest: (\.py)$
Features:

1: LIT|a literal character | 3.5
2: CG|a capture group | 1.5
3: DEC|any of: 0123456789 | 1.0
4: END|end-of-line | 1.0
5: QST|zero-or-one repetition | 1.0


0000 | 0003 | 'pip(\\d(\\.\\d)?)?$'
0001 | 0001 | '(\\.py)$'



cluster 102 stats:
nPatterns: 2.0
nProjects: 4
shortest: tag:.*\[(.*)\]
Features:

1: LIT|a literal character | 6.0
2: KLE|zero-or-more repetition | 2.0
3: ANY|any non-newline char | 1.0
4: CG|a capture group | 1.0
5: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0
6: ADD|one-or-more repetition | 0.5
7: CCC|custom character class | 0.5
8: NWSP|any non-whitespace | 0.5


0000 | 0002 | 'tag:.*\\[(.*)\\]'
0001 | 0002 | '\\[tag:\\s*([\\S]+)\\s*]'



cluster 103 stats:
nPatterns: 4.0
nProjects: 4
shortest: /\d+
Features:

1: DEC|any of: 0123456789 | 2.5
2: ADD|one-or-more repetition | 1.75
3: LIT|a literal character | 1.25
4: ANY|any non-newline char | 0.75


0000 | 0001 | '/\\d+'
0001 | 0001 | '\\d+:\\d+'
0002 | 0001 | '\\d.\\d.\\d'
0003 | 0001 | '.\\d+\\.\\d+\\.\\d+\\.\\d+'



cluster 104 stats:
nPatterns: 2.0
nProjects: 4
shortest: ^http://testserver/somewhere/else/\?c=\d+#baz$
Features:

1: LIT|a literal character | 44.0
2: ADD|one-or-more repetition | 1.0
3: DEC|any of: 0123456789 | 1.0
4: END|end-of-line | 1.0
5: STR|start-of-line | 1.0


0000 | 0004 | '^http://testserver/somewhere/else/\\?c=\\d+#baz$'
0001 | 0004 | '^http://testserver/somewhere/else/\\?foo=bar&c=\\d+#baz$'



cluster 105 stats:
nPatterns: 3.0
nProjects: 4
shortest: mozilla\.[com|net|org]
Features:

1: LIT|a literal character | 26.0
2: CCC|custom character class | 1.0
3: CG|a capture group | 1.0
4: ADD|one-or-more repetition | 0.6666666666666666
5: OR|logical or | 0.6666666666666666
6: ANY|any non-newline char | 0.3333333333333333
7: END|end-of-line | 0.3333333333333333
8: NCCC|negated CCC | 0.3333333333333333


0000 | 0002 | '[^%]+%testing[.](expect-failure|expect-success)'
0001 | 0001 | 'mozilla\\.[com|net|org]'
0002 | 0001 | '(.+)[.](proto|impl|init|cleanup)$'



cluster 106 stats:
nPatterns: 4.0
nProjects: 4
shortest: (string.)|(comment.)
Features:

1: LIT|a literal character | 18.5
2: OR|logical or | 1.0
3: ANY|any non-newline char | 0.75
4: CG|a capture group | 0.75
5: OPT|options wrapper | 0.5
6: NCG|group without capturing | 0.25


0000 | 0001 | '(string.)|(comment.)'
0001 | 0001 | '(?i)incorporated|(?i)inc.'
0002 | 0001 | '(AppKit|Foundation)\\.doc'
0003 | 0001 | '@(?:end|implementation|protocol)'



cluster 107 stats:
nPatterns: 4.0
nProjects: 4
shortest: (?<=\()\w*\,?\s*
Features:

1: KLE|zero-or-more repetition | 4.25
2: LIT|a literal character | 3.75
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.5
4: CG|a capture group | 2.0
5: WRD|[a-zA-Z0-9\_] | 1.75
6: CCC|custom character class | 1.25
7: ADD|one-or-more repetition | 0.5
8: ANY|any non-newline char | 0.5
9: PNG|named capture group | 0.5
10: DEC|any of: 0123456789 | 0.25
11: LKB|matching sequence precedes | 0.25
12: LZY|as few reps as possible | 0.25
13: QST|zero-or-one repetition | 0.25


0000 | 0002 | '(?P<lhs>(\\s*)([\\w\\.]+)((\\s*,\\s*[\\w\\.]+)*))\\s*=\\s*%(?P<cmd>.*)'
0001 | 0001 | '(?<=\\()\\w*\\,?\\s*'
0002 | 0001 | '<([\\w]*)=([, \\w]*)>'
0003 | 0001 | '<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>'



cluster 108 stats:
nPatterns: 4.0
nProjects: 4
shortest: <p>\.notes:\s?(.*?)</p>
Features:

1: LIT|a literal character | 13.0
2: ADD|one-or-more repetition | 1.75
3: ANY|any non-newline char | 1.75
4: CG|a capture group | 1.5
5: KLE|zero-or-more repetition | 1.25
6: QST|zero-or-one repetition | 1.25
7: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.25
8: LZY|as few reps as possible | 1.0
9: PNG|named capture group | 0.75
10: WRD|[a-zA-Z0-9\_] | 0.5
11: NCG|group without capturing | 0.25
12: STR|start-of-line | 0.25


0000 | 0002 | '^\\s*@return\\s+(?P<type>\\w+)(?:\\s+(?P<doc>.*))?'
0001 | 0001 | '<.+>(?P<content>.*)</.+>'
0002 | 0001 | '<p>\\.notes:\\s?(.*?)</p>'
0003 | 0001 | '(<pre.+?>(<code>)?\\s?!(\\w+?)\\n(.*?)(</code>)?</pre>)'



cluster 109 stats:
nPatterns: 4.0
nProjects: 4
shortest: (^\s+Invalid write of size )\d+
Features:

1: LIT|a literal character | 34.0
2: CG|a capture group | 1.75
3: ADD|one-or-more repetition | 1.5
4: KLE|zero-or-more repetition | 1.25
5: DEC|any of: 0123456789 | 1.0
6: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0
7: ANY|any non-newline char | 0.5
8: STR|start-of-line | 0.5
9: END|end-of-line | 0.25
10: NCCC|negated CCC | 0.25
11: OR|logical or | 0.25


0000 | 0003 | '(^\\s+Invalid write of size )\\d+'
0001 | 0003 | "Success: created profile .* at '([^']+)'"
0002 | 0001 | "Couldn't start forwarder server for port spec: (\\d+):(\\d+)"
0003 | 0001 | '^I/(stderr)\\s*\\(\\s*\\d+\\):\\s*((info|warning|error|debug): .*)$'



cluster 110 stats:
nPatterns: 4.0
nProjects: 4
shortest: (?P<protocol>[a-z]+)://(?P<token>[0-9:]+)
Features:

1: LIT|a literal character | 14.5
2: CCC|custom character class | 2.5
3: QST|zero-or-one repetition | 2.0
4: PNG|named capture group | 1.75
5: RNG|chars within a range | 1.75
6: ADD|one-or-more repetition | 1.5
7: CG|a capture group | 1.25
8: KLE|zero-or-more repetition | 1.0
9: ANY|any non-newline char | 0.75
10: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5
11: DEC|any of: 0123456789 | 0.25
12: OR|logical or | 0.25


0000 | 0001 | '(?P<protocol>[a-z]+)://(?P<token>[0-9:]+)'
0001 | 0001 | 'c\\([\\d.,\\s-]*,\\s*(?P<final>-?[0-9.]+)\n?\\)'
0002 | 0001 | '(.*)derpiboo((.ru)|(ru.org))(/images)?/(?P<id>[0-9]*)/?'
0003 | 0001 | '(?P<integer>[-+]?[0-9]+)(?P<decimal>\\.[0-9]+)?(?P<exponent>e[-+]?[0-9]+)?'



cluster 111 stats:
nPatterns: 5.0
nProjects: 4
shortest: (?P<whitespace>[ \n]*)(?P<entry>[^ \n]+)
Features:

1: LIT|a literal character | 11.0
2: ADD|one-or-more repetition | 2.8
3: PNG|named capture group | 2.4
4: KLE|zero-or-more repetition | 1.4
5: NCCC|negated CCC | 1.4
6: DEC|any of: 0123456789 | 1.2
7: CG|a capture group | 0.6
8: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.6
9: ANY|any non-newline char | 0.4
10: CCC|custom character class | 0.4
11: LZY|as few reps as possible | 0.4
12: QST|zero-or-one repetition | 0.4
13: END|end-of-line | 0.2
14: NWSP|any non-whitespace | 0.2
15: OR|logical or | 0.2
16: RNG|chars within a range | 0.2
17: STR|start-of-line | 0.2


0000 | 0001 | '(?P<whitespace>[ \n]*)(?P<entry>[^ \n]+)'
0001 | 0001 | '^R(?P<reps>\\d+)?/(?P<start>[^P][^/]*)/(?P<intv>P.+)$'
0002 | 0001 | '(?P<pid>\\d+)\\s+rename\\("[^"]*", "(?P<name>[^"]*)"\\)'
0003 | 0001 | '\\[\\[(?P<t>[^\\]]*?) +(?P<k>\\S+) +(?P<p>left|right|center)\\]\\]'
0004 | 0001 | '[^\\d]+ (\\d+)\\.(\\d+)\\.(\\d+)\\s*\\((?P<datetime>.+?)\\)\\s*(?P<type>[a-z]+)?'



cluster 112 stats:
nPatterns: 2.0
nProjects: 3
shortest: pam
Features:

1: LIT|a literal character | 4.0


0000 | 0002 | '&amp;'
0001 | 0001 | 'pam'



cluster 113 stats:
nPatterns: 2.0
nProjects: 3
shortest: \bcsc\b
Features:

1: LIT|a literal character | 3.0
2: WNW|word/non-word boundary | 1.5
3: CCC|custom character class | 0.5


0000 | 0002 | '\\bcsc\\b'
0001 | 0001 | '\\bc[cs]'



cluster 114 stats:
nPatterns: 2.0
nProjects: 3
shortest: LR Number:
Features:

1: LIT|a literal character | 10.0


0000 | 0002 | 'LR Number:'
0001 | 0001 | 'Run number'



cluster 115 stats:
nPatterns: 2.0
nProjects: 3
shortest: \bratsimp\b
Features:

1: LIT|a literal character | 8.5
2: WNW|word/non-word boundary | 1.0
3: KLE|zero-or-more repetition | 0.5
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5


0000 | 0002 | '\\bratsimp\\b'
0001 | 0001 | '\\s*!important'



cluster 116 stats:
nPatterns: 2.0
nProjects: 3
shortest: Model:\s+(.+)
Features:

1: LIT|a literal character | 7.0
2: ADD|one-or-more repetition | 3.0
3: CG|a capture group | 1.5
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.5
5: ANY|any non-newline char | 1.0
6: DEC|any of: 0123456789 | 0.5
7: WRD|[a-zA-Z0-9\_] | 0.5


0000 | 0002 | 'MemFree:\\s+(.\\d+)\\s+(\\w+)'
0001 | 0001 | 'Model:\\s+(.+)'



cluster 117 stats:
nPatterns: 2.0
nProjects: 3
shortest: Mobile; rv:([\d.]+)
Features:

1: LIT|a literal character | 12.5
2: ADD|one-or-more repetition | 1.0
3: CCC|custom character class | 1.0
4: CG|a capture group | 1.0
5: DEC|any of: 0123456789 | 1.0


0000 | 0002 | 'dot version ([\\d\\.]+)'
0001 | 0001 | 'Mobile; rv:([\\d.]+)'



cluster 118 stats:
nPatterns: 2.0
nProjects: 3
shortest: .*video:(\d+).*
Features:

1: LIT|a literal character | 9.5
2: ANY|any non-newline char | 2.0
3: DEC|any of: 0123456789 | 2.0
4: ADD|one-or-more repetition | 1.5
5: KLE|zero-or-more repetition | 1.5
6: CG|a capture group | 1.0


0000 | 0002 | '(\\d+):.*virtio\\d+-input.\\d'
0001 | 0001 | '.*video:(\\d+).*'



cluster 119 stats:
nPatterns: 3.0
nProjects: 3
shortest: <tr valign
Features:

1: LIT|a literal character | 13.333333333333334


0000 | 0001 | '<tr valign'
0001 | 0001 | 'internal log'
0002 | 0001 | 'exe not registered'



cluster 120 stats:
nPatterns: 2.0
nProjects: 3
shortest: \.(js|java)(?:\.in)?$
Features:

1: LIT|a literal character | 11.5
2: CG|a capture group | 1.0
3: END|end-of-line | 1.0
4: NCG|group without capturing | 1.0
5: OR|logical or | 1.0
6: QST|zero-or-one repetition | 1.0


0000 | 0002 | '\\.(js|java)(?:\\.in)?$'
0001 | 0001 | '\\.(js|jsm|java)(?:\\.in)?$'



cluster 121 stats:
nPatterns: 2.0
nProjects: 3
shortest: .*lib(n?cursesw?)\.so.*
Features:

1: LIT|a literal character | 18.5
2: ANY|any non-newline char | 2.5
3: KLE|zero-or-more repetition | 2.0
4: CG|a capture group | 1.5
5: QST|zero-or-one repetition | 1.0


0000 | 0002 | '.*lib(n?cursesw?)\\.so.*'
0001 | 0001 | 'About\\((.*)\\).should_include\\((.*)\\)'



cluster 122 stats:
nPatterns: 3.0
nProjects: 3
shortest: .*/vote_history.pdf
Features:

1: LIT|a literal character | 19.333333333333332
2: ANY|any non-newline char | 2.0
3: KLE|zero-or-more repetition | 0.6666666666666666
4: DEC|any of: 0123456789 | 0.3333333333333333


0000 | 0001 | '.*/vote_history.pdf'
0001 | 0001 | '/posters/archive/main/.*'
0002 | 0001 | 'dhcp.option.ntp_server.\\d'



cluster 123 stats:
nPatterns: 2.0
nProjects: 3
shortest: <img.*?src="(?!http://)(.*?)".*/?>
Features:

1: LIT|a literal character | 27.0
2: ANY|any non-newline char | 2.5
3: KLE|zero-or-more repetition | 2.5
4: CG|a capture group | 1.0
5: LZY|as few reps as possible | 1.0
6: QST|zero-or-one repetition | 1.0
7: NCG|group without capturing | 0.5
8: NLKA|sequence doesn't follow  | 0.5


0000 | 0002 | '<img class=thumbnail-img (?:.* )?src=(http.*)>'
0001 | 0001 | '<img.*?src="(?!http://)(.*?)".*/?>'



cluster 124 stats:
nPatterns: 3.0
nProjects: 3
shortest: <script .*?</script>
Features:

1: LIT|a literal character | 16.666666666666668
2: KLE|zero-or-more repetition | 2.3333333333333335
3: ANY|any non-newline char | 1.3333333333333333
4: LZY|as few reps as possible | 1.3333333333333333
5: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0


0000 | 0001 | '<script .*?</script>'
0001 | 0001 | '<script.*?>.*?</script>'
0002 | 0001 | '<\\s*script.*?<\\s*/script\\s*>'



cluster 125 stats:
nPatterns: 4.0
nProjects: 3
shortest: ^.htaccess$
Features:

1: LIT|a literal character | 12.0
2: END|end-of-line | 1.0
3: STR|start-of-line | 0.75
4: ANY|any non-newline char | 0.25


0000 | 0001 | '^.htaccess$'
0001 | 0001 | '\\^headers\\^$'
0002 | 0001 | '^dhcp\\.pool\\.start$'
0003 | 0001 | '^dhcp\\.scope\\.start$'



cluster 126 stats:
nPatterns: 2.0
nProjects: 3
shortest: ^\s*(if|try|elif|while|for)
Features:

1: LIT|a literal character | 21.5
2: KLE|zero-or-more repetition | 4.0
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 3.5
4: CG|a capture group | 2.0
5: OR|logical or | 1.5
6: ADD|one-or-more repetition | 0.5
7: ANY|any non-newline char | 0.5
8: NCCC|negated CCC | 0.5
9: STR|start-of-line | 0.5


0000 | 0002 | '^\\s*(if|try|elif|while|for)'
0001 | 0001 | '\\s*(((if|while)\\s*\\(|else\\s*|else\\s+if\\s*\\(|for\\s*\\(.*\\))[^{;]*)'



cluster 127 stats:
nPatterns: 3.0
nProjects: 3
shortest: \s+\[(?P<section>.*)\]
Features:

1: LIT|a literal character | 4.0
2: KLE|zero-or-more repetition | 1.6666666666666667
3: PNG|named capture group | 1.3333333333333333
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.3333333333333333
5: ADD|one-or-more repetition | 0.6666666666666666
6: QST|zero-or-one repetition | 0.6666666666666666
7: ANY|any non-newline char | 0.3333333333333333
8: END|end-of-line | 0.3333333333333333
9: NCCC|negated CCC | 0.3333333333333333
10: NWSP|any non-whitespace | 0.3333333333333333
11: STR|start-of-line | 0.3333333333333333


0000 | 0001 | '\\s+\\[(?P<section>.*)\\]'
0001 | 0001 | '\\-\\s*\\[\\[(?P<t>\\S+)\\]\\]'
0002 | 0001 | '^\\s*\\[(?P<state>!?!?)(?P<section>[^\\]]*)\\]\\s*$'



cluster 128 stats:
nPatterns: 2.0
nProjects: 3
shortest: ^(?P<area>1\d1|11\d|8\d\d)(?P<area2>\d{3})(?P<station>\d+)$
Features:

1: LIT|a literal character | 5.5
2: DEC|any of: 0123456789 | 4.5
3: PNG|named capture group | 3.0
4: ADD|one-or-more repetition | 2.5
5: SNG|exactly n repetition | 2.0
6: END|end-of-line | 1.0
7: STR|start-of-line | 1.0
8: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0
9: ANY|any non-newline char | 0.5
10: LZY|as few reps as possible | 0.5
11: NCCC|negated CCC | 0.5
12: OR|logical or | 0.5


0000 | 0002 | '^(?P<date>\\d{4}-\\d{2}-\\d{2})\\s+(?P<name>.+?)\\s+<(?P<email>[^<>]+)>$'
0001 | 0001 | '^(?P<area>1\\d1|11\\d|8\\d\\d)(?P<area2>\\d{3})(?P<station>\\d+)$'



cluster 129 stats:
nPatterns: 4.0
nProjects: 3
shortest: LL_VERSION_BUILD\s=\s([0-9]+)
Features:

1: LIT|a literal character | 21.0
2: CCC|custom character class | 1.5
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.5
4: ADD|one-or-more repetition | 1.0
5: CG|a capture group | 1.0
6: RNG|chars within a range | 1.0
7: KLE|zero-or-more repetition | 0.75
8: ANY|any non-newline char | 0.25


0000 | 0001 | 'LL_VERSION_BUILD\\s=\\s([0-9]+)'
0001 | 0001 | 'IMP_VERSION_MAJOR\\s=\\s([0-9]+)'
0002 | 0001 | 'IMP_VERSION_PATCH\\s=\\s([0-9]+)'
0003 | 0001 | 'PACKAGE_VERSION *= *[\'"]([0-9.]+)["\'].*'



cluster 130 stats:
nPatterns: 2.0
nProjects: 2
shortest: ([|&])
Features:

1: LIT|a literal character | 3.0
2: CCC|custom character class | 1.0
3: CG|a capture group | 1.0


0000 | 0001 | '([|&])'
0001 | 0001 | '([()| ])'



cluster 131 stats:
nPatterns: 2.0
nProjects: 2
shortest: foo.*bar
Features:

1: LIT|a literal character | 6.0
2: ANY|any non-newline char | 1.5
3: KLE|zero-or-more repetition | 1.5


0000 | 0002 | 'foo.*bar'
0001 | 0002 | '.*foo.*bar'



cluster 132 stats:
nPatterns: 2.0
nProjects: 2
shortest: (\\*)\n
Features:

1: LIT|a literal character | 2.0
2: CG|a capture group | 1.0
3: KLE|zero-or-more repetition | 1.0
4: ADD|one-or-more repetition | 0.5
5: STR|start-of-line | 0.5


0000 | 0001 | '(\\\\*)\n'
0001 | 0001 | '\\A( *\\n)+'



cluster 133 stats:
nPatterns: 2.0
nProjects: 2
shortest: ^Uid:\s+(\d+)
Features:

1: LIT|a literal character | 4.5
2: ADD|one-or-more repetition | 2.0
3: CG|a capture group | 1.0
4: DEC|any of: 0123456789 | 1.0
5: STR|start-of-line | 1.0
6: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0
7: END|end-of-line | 0.5


0000 | 0001 | '^Uid:\\s+(\\d+)'
0001 | 0001 | '^PPid:\\s+(\\d+)$'



cluster 134 stats:
nPatterns: 2.0
nProjects: 2
shortest: test_file_commit1
Features:

1: LIT|a literal character | 17.0


0000 | 0002 | 'test_file_commit1'
0001 | 0002 | 'test_file_commit2'



cluster 135 stats:
nPatterns: 2.0
nProjects: 2
shortest: [a-zA-Z]:(/|\\)
Features:

1: LIT|a literal character | 7.0
2: RNG|chars within a range | 2.0
3: CCC|custom character class | 1.5
4: ADD|one-or-more repetition | 1.0
5: CG|a capture group | 0.5
6: NWSP|any non-whitespace | 0.5
7: OR|logical or | 0.5


0000 | 0001 | '[a-zA-Z]:(/|\\\\)'
0001 | 0001 | '[a-zA-Z]+://[\\S]+'



cluster 136 stats:
nPatterns: 2.0
nProjects: 2
shortest: (?i)handy(.*)nummer
Features:

1: LIT|a literal character | 11.0
2: ANY|any non-newline char | 1.0
3: CG|a capture group | 1.0
4: KLE|zero-or-more repetition | 1.0
5: OPT|options wrapper | 1.0


0000 | 0002 | '(?i)handy(.*)nummer'
0001 | 0002 | '(?i)pager(.*)nummer'



cluster 137 stats:
nPatterns: 2.0
nProjects: 2
shortest: \d+\.\.$|\.{4}$
Features:

1: LIT|a literal character | 2.5
2: DEC|any of: 0123456789 | 2.0
3: SNG|exactly n repetition | 2.0
4: END|end-of-line | 1.5
5: ADD|one-or-more repetition | 0.5
6: OR|logical or | 0.5
7: STR|start-of-line | 0.5


0000 | 0001 | '\\d+\\.\\.$|\\.{4}$'
0001 | 0001 | '^\\d{4}\\.\\d{2}\\.\\d{2}$'



cluster 138 stats:
nPatterns: 2.0
nProjects: 2
shortest: Cert\s+\d+:\s+(.*)$
Features:

1: LIT|a literal character | 7.5
2: ADD|one-or-more repetition | 2.0
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.5
4: ANY|any non-newline char | 1.0
5: CG|a capture group | 1.0
6: END|end-of-line | 1.0
7: KLE|zero-or-more repetition | 1.0
8: DEC|any of: 0123456789 | 0.5
9: STR|start-of-line | 0.5


0000 | 0001 | 'Cert\\s+\\d+:\\s+(.*)$'
0001 | 0001 | '^queryCid(\\(.+\\))\\s*$'



cluster 139 stats:
nPatterns: 2.0
nProjects: 2
shortest: ^New Revision: (\d+)
Features:

1: LIT|a literal character | 13.5
2: ADD|one-or-more repetition | 1.5
3: CG|a capture group | 1.0
4: DEC|any of: 0123456789 | 1.0
5: STR|start-of-line | 0.5
6: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5


0000 | 0001 | '^New Revision: (\\d+)'
0001 | 0001 | 'NUMA node\\(s\\):\\s+(\\d+)'



cluster 140 stats:
nPatterns: 2.0
nProjects: 2
shortest: ^[ ]{0,3}:[ ]{1,3}(.*)$
Features:

1: LIT|a literal character | 6.0
2: DBB|$n\le x \le m$ repetition | 1.5
3: KLE|zero-or-more repetition | 1.5
4: ANY|any non-newline char | 1.0
5: CCC|custom character class | 1.0
6: CG|a capture group | 1.0
7: END|end-of-line | 0.5
8: LZY|as few reps as possible | 0.5
9: NCCC|negated CCC | 0.5
10: NCG|group without capturing | 0.5
11: STR|start-of-line | 0.5


0000 | 0001 | '^[ ]{0,3}:[ ]{1,3}(.*)$'
0001 | 0001 | '<s(?: [^>]*){0,1}>(.*?)</s>'



cluster 141 stats:
nPatterns: 2.0
nProjects: 2
shortest: diff --git .* b/(.*)\n
Features:

1: LIT|a literal character | 15.5
2: CG|a capture group | 1.5
3: ADD|one-or-more repetition | 1.0
4: ANY|any non-newline char | 1.0
5: KLE|zero-or-more repetition | 1.0
6: NWSP|any non-whitespace | 1.0
7: END|end-of-line | 0.5
8: STR|start-of-line | 0.5


0000 | 0001 | 'diff --git .* b/(.*)\n'
0001 | 0001 | '^diff --git a/(\\S+) b/(\\S+)$'



cluster 142 stats:
nPatterns: 2.0
nProjects: 2
shortest: <code>([^<]+)</code>
Features:

1: LIT|a literal character | 21.0
2: ADD|one-or-more repetition | 1.0
3: CG|a capture group | 1.0
4: NCCC|negated CCC | 1.0


0000 | 0001 | '<code>([^<]+)</code>'
0001 | 0001 | '<description>([^<]+)</description>'



cluster 143 stats:
nPatterns: 2.0
nProjects: 2
shortest: REMARK   2 RESOLUTION.
Features:

1: LIT|a literal character | 27.0
2: ANY|any non-newline char | 0.5


0000 | 0001 | 'REMARK   2 RESOLUTION.'
0001 | 0001 | 'KVM_TEST_VIRTIO_NETWORK_INSTALLER'



cluster 144 stats:
nPatterns: 2.0
nProjects: 2
shortest: ^START TIME:\s(.*)$
Features:

1: LIT|a literal character | 13.5
2: KLE|zero-or-more repetition | 2.5
3: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.0
4: ANY|any non-newline char | 1.0
5: CG|a capture group | 1.0
6: END|end-of-line | 1.0
7: STR|start-of-line | 1.0
8: NWSP|any non-whitespace | 0.5


0000 | 0001 | '^START TIME:\\s(.*)$'
0001 | 0001 | '^\\s*DATS_FREE_DISKS\\s*=(.*\\S)\\s*$'



cluster 145 stats:
nPatterns: 2.0
nProjects: 2
shortest: (<[^<]*snum=)([^">]+)>
Features:

1: LIT|a literal character | 19.5
2: NCCC|negated CCC | 2.0
3: CG|a capture group | 1.5
4: KLE|zero-or-more repetition | 1.5
5: ADD|one-or-more repetition | 0.5


0000 | 0001 | '(<[^<]*snum=)([^">]+)>'
0001 | 0001 | '<em class="loadnum"[^<>]*>([^<>]*)</em>'



cluster 146 stats:
nPatterns: 2.0
nProjects: 2
shortest: [.:,\s!?+=\(\)/-]+
Features:

1: LIT|a literal character | 10.0
2: ANY|any non-newline char | 1.5
3: KLE|zero-or-more repetition | 1.5
4: NLKA|sequence doesn't follow  | 1.5
5: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0
6: ADD|one-or-more repetition | 0.5
7: CCC|custom character class | 0.5
8: OR|logical or | 0.5


0000 | 0001 | '[.:,\\s!?+=\\(\\)/-]+'
0001 | 0001 | '\\s|=|,|:|\\((?!.*\\))|\\[(?!.*\\])|\\{(?!.*\\})'



cluster 147 stats:
nPatterns: 2.0
nProjects: 2
shortest: ^/v2/images/([^\/]+)$
Features:

1: LIT|a literal character | 11.5
2: CG|a capture group | 3.0
3: KLE|zero-or-more repetition | 1.5
4: ADD|one-or-more repetition | 1.0
5: END|end-of-line | 1.0
6: STR|start-of-line | 1.0
7: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.0
8: ANY|any non-newline char | 0.5
9: NCCC|negated CCC | 0.5
10: OR|logical or | 0.5


0000 | 0001 | '^/v2/images/([^\\/]+)$'
0001 | 0001 | '^(\\s*(\\[\\[image((\\(.*\\))|())\\]\\])\\s*)+$'



cluster 148 stats:
nPatterns: 2.0
nProjects: 2
shortest: ^(?P<x>\d+)?(?:x(?P<y>\d+))?$
Features:

1: LIT|a literal character | 4.5
2: ADD|one-or-more repetition | 2.0
3: PNG|named capture group | 2.0
4: DEC|any of: 0123456789 | 1.5
5: QST|zero-or-one repetition | 1.5
6: END|end-of-line | 1.0
7: NCG|group without capturing | 1.0
8: STR|start-of-line | 1.0
9: NCCC|negated CCC | 0.5


0000 | 0001 | '^(?P<x>\\d+)?(?:x(?P<y>\\d+))?$'
0001 | 0001 | '^{(?P<w>[^[\\]()]+)(?:\\[(?P<i>\\d+)\\])?}$'



cluster 149 stats:
nPatterns: 2.0
nProjects: 2
shortest: <br />\s*([^<]+)<br />\s*([^<]+)<
Features:

1: LIT|a literal character | 14.5
2: ADD|one-or-more repetition | 1.5
3: CG|a capture group | 1.5
4: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 1.5
5: KLE|zero-or-more repetition | 1.0
6: NCCC|negated CCC | 1.0
7: NLKB|sequence doesn't precede | 1.0
8: ANY|any non-newline char | 0.5
9: CCC|custom character class | 0.5
10: NCG|group without capturing | 0.5
11: NLKA|sequence doesn't follow  | 0.5
12: OR|logical or | 0.5


0000 | 0001 | '<br />\\s*([^<]+)<br />\\s*([^<]+)<'
0001 | 0001 | '(.+)(?:(?<!<br>)|(?<!<br />))\\n(?![#*\\s|])'



cluster 150 stats:
nPatterns: 2.0
nProjects: 2
shortest: (\s*)([A-F0-9]*) /\* ([^ ]+) \*/
Features:

1: LIT|a literal character | 13.5
2: CG|a capture group | 3.5
3: RNG|chars within a range | 3.5
4: ADD|one-or-more repetition | 3.0
5: KLE|zero-or-more repetition | 2.5
6: CCC|custom character class | 2.0
7: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 2.0
8: ANY|any non-newline char | 1.0
9: END|end-of-line | 0.5
10: NCCC|negated CCC | 0.5
11: STR|start-of-line | 0.5


0000 | 0001 | '(\\s*)([A-F0-9]*) /\\* ([^ ]+) \\*/'
0001 | 0001 | '^(.*)(\\([0-9A-Fx]+,[0-9A-F]+\\))\\s+([1-3C]+)\\s+(.*)\\s*$'



cluster 151 stats:
nPatterns: 2.0
nProjects: 2
shortest: .*?TASK_STATUS="FAILED".*?ERROR=".*?failed to report status for (\d+) seconds.*?"
Features:

1: LIT|a literal character | 68.5
2: ANY|any non-newline char | 4.0
3: KLE|zero-or-more repetition | 3.5
4: LZY|as few reps as possible | 3.5
5: ADD|one-or-more repetition | 1.0
6: CG|a capture group | 1.0
7: DEC|any of: 0123456789 | 1.0


0000 | 0001 | '.*?TASK_STATUS="FAILED".*?ERROR=".*?failed to report status for (\\d+) seconds.*?"'
0001 | 0001 | '.*?TASK_STATUS="FAILED".*?ERROR=".*?failed to report status for (\\d+) seconds. Killing!"'



cluster 152 stats:
nPatterns: 2.0
nProjects: 2
shortest: [Ee]rr(or)?: (?P<error>.+?(Could not match (?P<near>.+?))?) at /.+?:(?P<line>\d+)?
Features:

1: LIT|a literal character | 26.5
2: PNG|named capture group | 3.5
3: ADD|one-or-more repetition | 3.0
4: QST|zero-or-one repetition | 2.5
5: ANY|any non-newline char | 1.5
6: LZY|as few reps as possible | 1.5
7: CG|a capture group | 1.0
8: DEC|any of: 0123456789 | 1.0
9: CCC|custom character class | 0.5
10: KLE|zero-or-more repetition | 0.5
11: NCCC|negated CCC | 0.5
12: NWSP|any non-whitespace | 0.5
13: OR|logical or | 0.5
14: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.5


0000 | 0001 | '[Ee]rr(or)?: (?P<error>.+?(Could not match (?P<near>.+?))?) at /.+?:(?P<line>\\d+)?'
0001 | 0001 | '(?P<protocol>PYROLOC|PYROLOCSSL)://(?P<hostname>[^\\s:]+):?(?P<port>\\d+)?/(?P<name>\\S*)'



cluster 153 stats:
nPatterns: 3.0
nProjects: 2
shortest: \([A-Z]\) 
Features:

1: LIT|a literal character | 13.666666666666666
2: DEC|any of: 0123456789 | 13.333333333333334
3: CG|a capture group | 5.333333333333333
4: WRD|[a-zA-Z0-9\_] | 2.6666666666666665
5: CCC|custom character class | 1.6666666666666667
6: RNG|chars within a range | 1.6666666666666667


0000 | 0001 | '\\([A-Z]\\) '
0001 | 0001 | '<(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d) [A-Z]\\w\\w>--<(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d) [A-Z]\\w\\w>'
0002 | 0001 | '<(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d) [A-Z]\\w\\w (\\d\\d):(\\d\\d)>--<(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d) [A-Z]\\w\\w (\\d\\d):(\\d\\d)>'



cluster 154 stats:
nPatterns: 19.0
nProjects: 2
shortest: (\xd0\xbd\xd0\xb0\xd1\x80\xd0\xb2\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f)
Features:

1: LIT|a literal character | 31.263157894736842
2: CG|a capture group | 0.8421052631578947
3: OR|logical or | 0.6842105263157895
4: ANY|any non-newline char | 0.15789473684210525
5: KLE|zero-or-more repetition | 0.05263157894736842


0000 | 0001 | '(\xd0\xbd\xd0\xb0\xd1\x80\xd0\xb2\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f)'
0001 | 0001 | '\xd0\xb2\xd0\xbe\xd1\x81\xd1\x82\xd1\x80\xd1\x8f\xd0\xba\xd0\xbe\xd0\xb2\xd0\xbe'
0002 | 0001 | '(\xd0\xbf\xd1\x83\xd1\x88\xd0\xba\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f)'
0003 | 0001 | '\xd0\xbd\xd0\xb0\xd0\xb3\xd0\xbe\xd1\x80\xd0\xbd(\xd0\xb0\xd1\x8f|\xd0\xbe\xd0\xb9)'
0004 | 0001 | '\xd1\x82\xd1\x83\xd0\xbb\xd1\x8c\xd1\x81\xd0\xba(\xd0\xb0\xd1\x8f|\xd0\xbe\xd0\xb9)'
0005 | 0001 | '\xd0\x98\xd0\xb7\xd0\xb1\xd1\x80\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \\((.*)\\)<\\/a>'
0006 | 0001 | '\xd0\xbc\xd0\xbe\xd0\xbb\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xb6\xd0\xbd(\xd0\xb0\xd1\x8f|\xd0\xbe\xd0\xb9)'
0007 | 0001 | '\xd0\xba\xd1\x83\xd0\xb7\xd0\xbd\xd0\xb5\xd1\x86\xd0\xba\xd0\xb8\xd0\xb9 \xd0\xbc\xd0\xbe\xd1\x81\xd1\x82'
0008 | 0001 | '\xd1\x84\xd0\xb8\xd0\xbb\xd0\xb5\xd0\xb2\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9 \xd0\xbf\xd0\xb0\xd1\x80\xd0\xba'
0009 | 0001 | '\xd1\x84\xd1\x80\xd1\x83\xd0\xbd\xd0\xb7\xd0\xb5\xd0\xbd\xd1\x81\xd0\xba(\xd0\xb8\xd0\xb9|\xd0\xbe\xd0\xbc)'
0010 | 0001 | '\xd0\xbf\xd1\x80\xd0\xbe\xd0\xbb\xd0\xb5\xd1\x82\xd0\xb0\xd1\x80\xd1\x81\xd0\xba(\xd0\xb0\xd1\x8f|\xd0\xbe\xd0\xb9)'
0011 | 0001 | '\xd1\x82\xd1\x83\xd1\x80\xd0\xb3\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb2\xd1\x81\xd0\xba(\xd0\xb0\xd1\x8f|\xd0\xbe\xd0\xb9)'
0012 | 0001 | '\xd1\x82\xd0\xb8\xd0\xbc\xd0\xb8\xd1\x80\xd1\x8f\xd0\xb7\xd0\xb5\xd0\xb2\xd1\x81\xd0\xba(\xd0\xb0\xd1\x8f|\xd0\xbe\xd0\xb9)'
0013 | 0001 | '\xd0\xba\xd1\x80\xd0\xb5\xd1\x81\xd1\x82\xd1\x8c\xd1\x8f\xd0\xbd\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f \xd0\xb7\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0\xd0\xb2\xd0\xb0'
0014 | 0001 | '(\xd0\xb3\xd1\x80\xd0\xb0\xd0\xb6\xd0\xb4\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9|\xd0\xb3\xd1\x80\xd0\xb0\xd0\xb6\xd0\xb4\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\\.)'
0015 | 0001 | '(\xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0|\xd1\x83\xd0\xbb.|\xd1\x83\xd0\xbb) \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb1\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x81\xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe'
0016 | 0001 | '\xd0\xbf\xd0\xb5\xd1\x82\xd1\x80\xd0\xbe\xd0\xb2\xd1\x81\xd0\xba\xd0\xbe-\xd1\x80\xd0\xb0\xd0\xb7\xd1\x83\xd0\xbc\xd0\xbe\xd0\xb2\xd1\x81\xd0\xba(\xd0\xb0\xd1\x8f|\xd0\xbe\xd0\xb9)'
0017 | 0001 | '(\xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0|\xd1\x83\xd0\xbb.|\xd1\x83\xd0\xbb) \xd1\x81\xd1\x82\xd0\xb0\xd1\x80\xd0\xbe\xd0\xba\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd0\xbe\xd0\xb2\xd1\x81\xd0\xba(\xd0\xb0\xd1\x8f|\xd0\xbe\xd0\xb9)'
0018 | 0001 | '(\xd0\xb1\xd1\x83\xd0\xbd\xd0\xbd\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f \xd0\xb0\xd0\xbb\xd0\xbb\xd0\xb5\xd1\x8f|\xd0\xb1\xd1\x83\xd0\xbd\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f \xd0\xb0\xd0\xbb\xd0\xbb\xd0\xb5\xd1\x8f)'



cluster 155 stats:
nPatterns: 2.0
nProjects: 1
shortest: href="(.*?)"
Features:

1: LIT|a literal character | 7.5
2: ANY|any non-newline char | 1.0
3: CG|a capture group | 1.0
4: KLE|zero-or-more repetition | 1.0
5: LZY|as few reps as possible | 1.0


0000 | 0001 | 'href="(.*?)"'
0001 | 0001 | 'Href="(.*?)">'



cluster 156 stats:
nPatterns: 2.0
nProjects: 1
shortest: [#][\dA-F]{3}
Features:

1: LIT|a literal character | 3.0
2: CCC|custom character class | 2.0
3: DEC|any of: 0123456789 | 1.0
4: RNG|chars within a range | 1.0
5: SNG|exactly n repetition | 1.0


0000 | 0001 | '[#][\\dA-F]{3}'
0001 | 0001 | '[#][\\dA-F]{6}'



cluster 157 stats:
nPatterns: 2.0
nProjects: 1
shortest: guibg=#*(\w+)
Features:

1: LIT|a literal character | 7.0
2: ADD|one-or-more repetition | 1.0
3: CG|a capture group | 1.0
4: KLE|zero-or-more repetition | 1.0
5: WRD|[a-zA-Z0-9\_] | 1.0


0000 | 0001 | 'guibg=#*(\\w+)'
0001 | 0001 | 'guifg=#*(\\w+)'



cluster 158 stats:
nPatterns: 2.0
nProjects: 1
shortest: diff --git a
Features:

1: LIT|a literal character | 12.0
2: ADD|one-or-more repetition | 0.5
3: ANY|any non-newline char | 0.5
4: CG|a capture group | 0.5
5: LZY|as few reps as possible | 0.5


0000 | 0001 | 'diff --git a'
0001 | 0001 | '.+?(diff --git a)'



cluster 159 stats:
nPatterns: 2.0
nProjects: 1
shortest: EMAIL_PROVIDER=
Features:

1: LIT|a literal character | 15.5


0000 | 0001 | 'EMAIL_PROVIDER='
0001 | 0001 | 'METASPLOIT_PATH='



cluster 160 stats:
nPatterns: 2.0
nProjects: 1
shortest: ^.*RLELossless.*$
Features:

1: LIT|a literal character | 11.5
2: ANY|any non-newline char | 2.0
3: KLE|zero-or-more repetition | 2.0
4: END|end-of-line | 1.0
5: STR|start-of-line | 1.0


0000 | 0001 | '^.*RLELossless.*$'
0001 | 0001 | '^.*JPEGLossless.*$'



cluster 161 stats:
nPatterns: 2.0
nProjects: 1
shortest: Simple_1Of_1unk_svc
Features:

1: LIT|a literal character | 19.5


0000 | 0001 | 'Simple_1Of_1unk_svc'
0001 | 0001 | 'Simple_1Of_1unk_host'



cluster 162 stats:
nPatterns: 2.0
nProjects: 1
shortest: \bLCOV_EXCL_LINE\b
Features:

1: LIT|a literal character | 14.5
2: WNW|word/non-word boundary | 2.0


0000 | 0001 | '\\bLCOV_EXCL_LINE\\b'
0001 | 0001 | '\\bLCOV_EXCL_START\\b'



cluster 163 stats:
nPatterns: 2.0
nProjects: 1
shortest: <pre><a name="foo-1">
Features:

1: LIT|a literal character | 21.0


0000 | 0001 | '<pre><a name="foo-1">'
0001 | 0001 | '<pre><a name="foo-5">'



cluster 164 stats:
nPatterns: 2.0
nProjects: 1
shortest: ^GlueSiteUniqueID: (.*)
Features:

1: LIT|a literal character | 25.0
2: ANY|any non-newline char | 1.0
3: CG|a capture group | 1.0
4: KLE|zero-or-more repetition | 1.0
5: STR|start-of-line | 1.0


0000 | 0001 | '^GlueSiteUniqueID: (.*)'
0001 | 0001 | '^GlueForeignKey: GlueCEUniqueID=(.*):'



cluster 165 stats:
nPatterns: 3.0
nProjects: 1
shortest: ^"(?P<data>.*)"$
Features:

1: LIT|a literal character | 5.333333333333333
2: ANY|any non-newline char | 1.0
3: KLE|zero-or-more repetition | 1.0
4: PNG|named capture group | 1.0
5: STR|start-of-line | 1.0
6: END|end-of-line | 0.6666666666666666


0000 | 0001 | '^"(?P<data>.*)"$'
0001 | 0001 | '^#: (?P<data>.*)'
0002 | 0001 | '^#~ msgid "(?P<data>.*)"$'



cluster 166 stats:
nPatterns: 1.0
nProjects: 1
shortest: pip \d(\.[\d])+(\.(pre|post)\d+)? from (.*) \(python \d(.[\d])+\)$
Features:

1: LIT|a literal character | 29.0
2: CG|a capture group | 5.0
3: DEC|any of: 0123456789 | 5.0
4: ADD|one-or-more repetition | 3.0
5: ANY|any non-newline char | 2.0
6: CCC|custom character class | 2.0
7: END|end-of-line | 1.0
8: KLE|zero-or-more repetition | 1.0
9: OR|logical or | 1.0
10: QST|zero-or-one repetition | 1.0


0000 | 0001 | 'pip \\d(\\.[\\d])+(\\.(pre|post)\\d+)? from (.*) \\(python \\d(.[\\d])+\\)$'



cluster 167 stats:
nPatterns: 3.0
nProjects: 1
shortest: ^std::__debug::deque<.*>$
Features:

1: LIT|a literal character | 26.666666666666668
2: ANY|any non-newline char | 1.0
3: END|end-of-line | 1.0
4: KLE|zero-or-more repetition | 1.0
5: STR|start-of-line | 1.0


0000 | 0001 | '^std::__debug::deque<.*>$'
0001 | 0001 | '^std::__debug::unordered_map<.*>$'
0002 | 0001 | '^std::_Rb_tree_const_iterator<.*>$'



cluster 168 stats:
nPatterns: 2.0
nProjects: 1
shortest: ^(?P<neg>-?)---(?P<D>\d\d)(?P<tz>Z|([-+]\d\d:\d\d))?$
Features:

1: LIT|a literal character | 7.0
2: DEC|any of: 0123456789 | 6.5
3: PNG|named capture group | 3.5
4: QST|zero-or-one repetition | 2.0
5: CCC|custom character class | 1.0
6: CG|a capture group | 1.0
7: END|end-of-line | 1.0
8: OR|logical or | 1.0
9: STR|start-of-line | 1.0
10: LWB|at least n repetition | 0.5


0000 | 0001 | '^(?P<neg>-?)---(?P<D>\\d\\d)(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'
0001 | 0001 | '^(?P<neg>-?)(?P<Y>\\d{4,})-(?P<M>\\d\\d)(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'



cluster 169 stats:
nPatterns: 4.0
nProjects: 1
shortest: \W\xd0\xb2\xd0\xb0\xd0\xbe\W
Features:

1: LIT|a literal character | 10.0
2: NWRD|non-word chars | 1.5


0000 | 0001 | '\\W\xd0\xb2\xd0\xb0\xd0\xbe\\W'
0001 | 0001 | '\\W\xd1\x81\xd0\xb2\xd0\xb0\xd0\xbe\\W'
0002 | 0001 | '\\W\xd1\x81\xd0\xb7\xd0\xb0\xd0\xbe\\W'
0003 | 0001 | '\xd0\xb0\xd0\xbb\xd1\x82\xd1\x83\xd1\x84\xd1\x8c\xd0\xb5\xd0\xb2\xd0\xbe'



cluster 170 stats:
nPatterns: 3.0
nProjects: 1
shortest: (?:<FONT SIZE="-1">|<font face="arial,helvetica" size=2><(?:B|I)>)([^<]*?)/([^<]*?)(?:</(?:B|I)></font>|</FONT>)
Features:

1: LIT|a literal character | 110.0
2: OR|logical or | 2.3333333333333335
3: NCG|group without capturing | 2.0
4: CG|a capture group | 1.6666666666666667
5: KLE|zero-or-more repetition | 1.6666666666666667
6: ANY|any non-newline char | 1.3333333333333333
7: LZY|as few reps as possible | 1.3333333333333333
8: NCCC|negated CCC | 0.6666666666666666
9: WSP|\textbackslash t \textbackslash n \textbackslash r \textbackslash b \textbackslash f or space | 0.3333333333333333


0000 | 0001 | '(?:<FONT SIZE="-1">|<font face="arial,helvetica" size=2><(?:B|I)>)([^<]*?)/([^<]*?)(?:</(?:B|I)></font>|</FONT>)'
0001 | 0001 | '<FONT SIZE="-1"><font face="arial,helvetica" size=2><B>The status of this EDM is (CLOSED|SUSPENDED).&nbsp;&nbsp;Reason: (.*?).</B></font>'
0002 | 0001 | '<TD>(?:<font face="arial,helvetica" size=2>|<FONT SIZE="-1"><font face="arial,helvetica" size=2><B>)\\s*(.*?)(?:</font>|</B></font></FONT>)</TD>'



